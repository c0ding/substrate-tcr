{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.15.2","program":"/home/gautam/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","trie_root","/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.15.2/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=ad8465bd8b8ba630","-C","extra-filename=-ad8465bd8b8ba630","--out-dir","/home/gautam/code/substrate-tcr/target/rls/debug/deps","-L","dependency=/home/gautam/code/substrate-tcr/target/rls/debug/deps","--extern","hash_db=/home/gautam/code/substrate-tcr/target/rls/debug/deps/libhash_db-bee3c0dd85e3fb70.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/gautam/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/gautam/code/substrate-tcr/target/rls/debug/deps/libtrie_root-ad8465bd8b8ba630.rmeta"},"prelude":{"crate_id":{"name":"trie_root","disambiguator":[5310396090432305669,10403818921799652823]},"crate_root":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.15.2/src","external_crates":[{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.15.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[4418738106075590160,6298063093324017560]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.15.2/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[9113878364975505769,4626460723841361367]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.15.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10636203250160794641,6979396832464280682]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.15.2/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7259142600435629501,12221323364939802703]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.15.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[245280942947536957,12219005383890086938]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.15.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6161946279237914842,16521306710208745576]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.15.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[6542909105960794691,9677219093962929367]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.15.2/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[5468829561226316808,7834745881253856659]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.15.2/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[17700629721805382410,8884445337419759755]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.15.2/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5673318663856259921,7992701887106127366]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.15.2/src/lib.rs","num":11,"id":{"name":"backtrace","disambiguator":[14096840682646779984,4894716104918169263]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.15.2/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[17167590092810160364,15681868143498786567]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.15.2/src/lib.rs","num":13,"id":{"name":"backtrace_sys","disambiguator":[9809686796458150241,12960706147778414440]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.15.2/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[14218938340851961837,11099897245983054425]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.15.2/src/lib.rs","num":15,"id":{"name":"hash_db","disambiguator":[13972142780812907637,312557294141452667]}}],"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.15.2/src/lib.rs","byte_start":603,"byte_end":10748,"line_start":15,"line_end":352,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":15,"index":20},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.15.2/src/lib.rs","byte_start":1093,"byte_end":1099,"line_start":38,"line_end":38,"column_start":18,"column_end":24},"alias_span":null,"name":"Hasher","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.15.2/src/lib.rs","byte_start":603,"byte_end":10748,"line_start":15,"line_end":352,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.15.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":28},{"krate":0,"index":32},{"krate":0,"index":38},{"krate":0,"index":46},{"krate":0,"index":52},{"krate":0,"index":58},{"krate":0,"index":66},{"krate":0,"index":72},{"krate":0,"index":79},{"krate":0,"index":88}],"decl_id":null,"docs":" Generates trie root.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":16},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.15.2/src/lib.rs","byte_start":1179,"byte_end":1189,"line_start":41,"line_end":41,"column_start":11,"column_end":21},"name":"TrieStream","qualname":"::TrieStream","value":"TrieStream","parent":null,"children":[{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":27}],"decl_id":null,"docs":" Byte-stream oriented trait for constructing closed-form tries.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.15.2/src/lib.rs","byte_start":1230,"byte_end":1233,"line_start":43,"line_end":43,"column_start":5,"column_end":8},"name":"new","qualname":"::TrieStream::new","value":"fn () -> Self","parent":{"krate":0,"index":16},"children":[],"decl_id":null,"docs":" Construct a new `TrieStream`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.15.2/src/lib.rs","byte_start":1275,"byte_end":1292,"line_start":45,"line_end":45,"column_start":5,"column_end":22},"name":"append_empty_data","qualname":"::TrieStream::append_empty_data","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":16},"children":[],"decl_id":null,"docs":" Append an Empty node\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.15.2/src/lib.rs","byte_start":1447,"byte_end":1459,"line_start":48,"line_end":48,"column_start":5,"column_end":17},"name":"begin_branch","qualname":"::TrieStream::begin_branch","value":"fn (&mut self, maybe_key: Option<&[u8]>, maybe_value: Option<&[u8]>, has_children: impl Iterator<Item = bool>) -> ()","parent":{"krate":0,"index":16},"children":[],"decl_id":null,"docs":" Start a new Branch node, possibly with a value; takes a list indicating\n which slots in the Branch node has further child nodes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.15.2/src/lib.rs","byte_start":1627,"byte_end":1645,"line_start":55,"line_end":55,"column_start":5,"column_end":23},"name":"append_empty_child","qualname":"::TrieStream::append_empty_child","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":16},"children":[],"decl_id":null,"docs":" Append an empty child node. Optional.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.15.2/src/lib.rs","byte_start":1774,"byte_end":1784,"line_start":58,"line_end":58,"column_start":5,"column_end":15},"name":"end_branch","qualname":"::TrieStream::end_branch","value":"fn (&mut self, _value: Option<&[u8]>) -> ()","parent":{"krate":0,"index":16},"children":[],"decl_id":null,"docs":" Wrap up a Branch node portion of a `TrieStream` and append the value\n stored on the Branch (if any).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.15.2/src/lib.rs","byte_start":1850,"byte_end":1861,"line_start":60,"line_end":60,"column_start":5,"column_end":16},"name":"append_leaf","qualname":"::TrieStream::append_leaf","value":"fn (&mut self, key: &[u8], value: &[u8]) -> ()","parent":{"krate":0,"index":16},"children":[],"decl_id":null,"docs":" Append a Leaf node\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.15.2/src/lib.rs","byte_start":1934,"byte_end":1950,"line_start":62,"line_end":62,"column_start":5,"column_end":21},"name":"append_extension","qualname":"::TrieStream::append_extension","value":"fn (&mut self, key: &[u8]) -> ()","parent":{"krate":0,"index":16},"children":[],"decl_id":null,"docs":" Append an Extension node\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.15.2/src/lib.rs","byte_start":2023,"byte_end":2039,"line_start":64,"line_end":64,"column_start":5,"column_end":21},"name":"append_substream","qualname":"::TrieStream::append_substream","value":"fn <H> (&mut self, other: Self) -> ()","parent":{"krate":0,"index":16},"children":[],"decl_id":null,"docs":" Append a Branch of Extension substream\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.15.2/src/lib.rs","byte_start":2140,"byte_end":2143,"line_start":66,"line_end":66,"column_start":5,"column_end":8},"name":"out","qualname":"::TrieStream::out","value":"fn (self) -> Vec<u8>","parent":{"krate":0,"index":16},"children":[],"decl_id":null,"docs":" Return the finished `TrieStream` as a vector of bytes.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":32},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.15.2/src/lib.rs","byte_start":3015,"byte_end":3024,"line_start":98,"line_end":98,"column_start":8,"column_end":17},"name":"trie_root","qualname":"::trie_root","value":"fn <H, S, I, A, B> (input: I) -> H::Out","parent":null,"children":[],"decl_id":null,"docs":" Generates a trie root hash for a vector of key-value tuples","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":46},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.15.2/src/lib.rs","byte_start":4244,"byte_end":4266,"line_start":144,"line_end":144,"column_start":8,"column_end":30},"name":"trie_root_no_extension","qualname":"::trie_root_no_extension","value":"fn <H, S, I, A, B> (input: I) -> H::Out","parent":null,"children":[],"decl_id":null,"docs":" Variant of `trie_root` for patricia trie without extension node.\n See [`trie_root`].\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":52},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.15.2/src/lib.rs","byte_start":4645,"byte_end":4658,"line_start":158,"line_end":158,"column_start":8,"column_end":21},"name":"unhashed_trie","qualname":"::unhashed_trie","value":"fn <H, S, I, A, B> (input: I) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Method similar to `trie_root` but returning the root encoded\n node instead of its hash.\n Mainly use for testing or debugging.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":66},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.15.2/src/lib.rs","byte_start":5863,"byte_end":5889,"line_start":203,"line_end":203,"column_start":8,"column_end":34},"name":"unhashed_trie_no_extension","qualname":"::unhashed_trie_no_extension","value":"fn <H, S, I, A, B> (input: I) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Variant of `unhashed_trie` for patricia trie without extension node.\n See [`unhashed_trie`].\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":72},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/trie-root-0.15.2/src/lib.rs","byte_start":6773,"byte_end":6786,"line_start":235,"line_end":235,"column_start":8,"column_end":21},"name":"sec_trie_root","qualname":"::sec_trie_root","value":"fn <H, S, I, A, B> (input: I) -> H::Out","parent":null,"children":[],"decl_id":null,"docs":" Generates a key-hashed (secure) trie root hash for a vector of key-value tuples.","sig":null,"attributes":[]}],"impls":[],"refs":[],"macro_refs":[],"relations":[]}