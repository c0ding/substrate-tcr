{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5","program":"/home/gautam/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","bs58","/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","-C","metadata=3b26183107477e63","-C","extra-filename=-3b26183107477e63","--out-dir","/home/gautam/code/substrate-tcr/target/rls/debug/deps","-L","dependency=/home/gautam/code/substrate-tcr/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/gautam/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/gautam/code/substrate-tcr/target/rls/debug/deps/libbs58-3b26183107477e63.rmeta"},"prelude":{"crate_id":{"name":"bs58","disambiguator":[8756477635938280203,10578034830433233917]},"crate_root":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src","external_crates":[{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[4418738106075590160,6298063093324017560]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[9113878364975505769,4626460723841361367]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10636203250160794641,6979396832464280682]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7259142600435629501,12221323364939802703]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[245280942947536957,12219005383890086938]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6161946279237914842,16521306710208745576]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[6542909105960794691,9677219093962929367]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[5468829561226316808,7834745881253856659]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[17700629721805382410,8884445337419759755]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5673318663856259921,7992701887106127366]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/lib.rs","num":11,"id":{"name":"backtrace","disambiguator":[14096840682646779984,4894716104918169263]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[17167590092810160364,15681868143498786567]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/lib.rs","num":13,"id":{"name":"backtrace_sys","disambiguator":[9809686796458150241,12960706147778414440]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[14218938340851961837,11099897245983054425]}}],"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/lib.rs","byte_start":0,"byte_end":8227,"line_start":1,"line_end":233,"column_start":1,"column_end":3}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":88},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/lib.rs","byte_start":2599,"byte_end":2609,"line_start":89,"line_end":89,"column_start":19,"column_end":29},"alias_span":null,"name":"FromBase58","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":84},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/lib.rs","byte_start":2611,"byte_end":2619,"line_start":89,"line_end":89,"column_start":31,"column_end":39},"alias_span":null,"name":"ToBase58","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/lib.rs","byte_start":0,"byte_end":8227,"line_start":1,"line_end":233,"column_start":1,"column_end":3},"name":"","qualname":"::","value":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":23},{"krate":0,"index":55},{"krate":0,"index":80},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":104},{"krate":0,"index":106}],"decl_id":null,"docs":" Another [Base58][] codec implementation.","sig":null,"attributes":[{"value":"warn(missing_copy_implementations)","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/lib.rs","byte_start":0,"byte_end":38,"line_start":1,"line_end":1,"column_start":1,"column_end":39}},{"value":"warn(missing_debug_implementations)","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/lib.rs","byte_start":39,"byte_end":78,"line_start":2,"line_end":2,"column_start":1,"column_end":40}},{"value":"warn(missing_docs)","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/lib.rs","byte_start":79,"byte_end":101,"line_start":3,"line_end":3,"column_start":1,"column_end":23}},{"value":"warn(trivial_casts)","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/lib.rs","byte_start":102,"byte_end":125,"line_start":4,"line_end":4,"column_start":1,"column_end":24}},{"value":"warn(trivial_numeric_casts)","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/lib.rs","byte_start":126,"byte_end":157,"line_start":5,"line_end":5,"column_start":1,"column_end":32}},{"value":"warn(unused_extern_crates)","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/lib.rs","byte_start":158,"byte_end":188,"line_start":6,"line_end":6,"column_start":1,"column_end":31}},{"value":"warn(unused_import_braces)","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/lib.rs","byte_start":189,"byte_end":219,"line_start":7,"line_end":7,"column_start":1,"column_end":31}},{"value":"warn(unused_results)","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/lib.rs","byte_start":220,"byte_end":244,"line_start":8,"line_end":8,"column_start":1,"column_end":25}},{"value":"warn(variant_size_differences)","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/lib.rs","byte_start":245,"byte_end":279,"line_start":9,"line_end":9,"column_start":1,"column_end":35}},{"value":"allow(unknown_lints)","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/lib.rs","byte_start":281,"byte_end":305,"line_start":11,"line_end":11,"column_start":1,"column_end":25}},{"value":"allow(renamed_and_removed_lints)","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/lib.rs","byte_start":320,"byte_end":356,"line_start":12,"line_end":12,"column_start":1,"column_end":37}},{"value":"allow(const_static_lifetime)","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/lib.rs","byte_start":391,"byte_end":423,"line_start":14,"line_end":14,"column_start":1,"column_end":33}},{"value":"allow(redundant_field_names)","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/lib.rs","byte_start":439,"byte_end":471,"line_start":15,"line_end":15,"column_start":1,"column_end":33}}]},{"kind":"Mod","id":{"krate":0,"index":12},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/alphabet.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"alphabet","qualname":"::alphabet","value":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/alphabet.rs","parent":null,"children":[{"krate":0,"index":13},{"krate":0,"index":15},{"krate":0,"index":17},{"krate":0,"index":19},{"krate":0,"index":21}],"decl_id":null,"docs":" Commonly used Base58 alphabets.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":13},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/alphabet.rs","byte_start":8488,"byte_end":8495,"line_start":7,"line_end":7,"column_start":11,"column_end":18},"name":"BITCOIN","qualname":"::alphabet::BITCOIN","value":"&'static [u8; 58]","parent":null,"children":[],"decl_id":null,"docs":" Bitcoin's alphabet as defined in their Base58Check encoding.","sig":null,"attributes":[{"value":"allow(doc_markdown)","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/alphabet.rs","byte_start":8266,"byte_end":8288,"line_start":3,"line_end":3,"column_start":1,"column_end":23}}]},{"kind":"Const","id":{"krate":0,"index":15},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/alphabet.rs","byte_start":8756,"byte_end":8762,"line_start":13,"line_end":13,"column_start":11,"column_end":17},"name":"MONERO","qualname":"::alphabet::MONERO","value":"&'static [u8; 58]","parent":null,"children":[],"decl_id":null,"docs":" Monero's alphabet as defined in this forum post.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":17},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/alphabet.rs","byte_start":8956,"byte_end":8962,"line_start":19,"line_end":19,"column_start":11,"column_end":17},"name":"RIPPLE","qualname":"::alphabet::RIPPLE","value":"&'static [u8; 58]","parent":null,"children":[],"decl_id":null,"docs":" Ripple's alphabet as defined in their wiki.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":19},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/alphabet.rs","byte_start":9197,"byte_end":9203,"line_start":25,"line_end":25,"column_start":11,"column_end":17},"name":"FLICKR","qualname":"::alphabet::FLICKR","value":"&'static [u8; 58]","parent":null,"children":[],"decl_id":null,"docs":" Flickr's alphabet for creating short urls from photo ids.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":21},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/alphabet.rs","byte_start":9417,"byte_end":9424,"line_start":30,"line_end":30,"column_start":11,"column_end":18},"name":"DEFAULT","qualname":"::alphabet::DEFAULT","value":"&'static [u8; 58]","parent":null,"children":[],"decl_id":null,"docs":" The default alphabet used if none is given. Currently is the\n [`BITCOIN`](constant.BITCOIN.html) alphabet.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":23},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/decode.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"decode","qualname":"::decode","value":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/decode.rs","parent":null,"children":[{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":108},{"krate":0,"index":127},{"krate":0,"index":125},{"krate":0,"index":123},{"krate":0,"index":121},{"krate":0,"index":118},{"krate":0,"index":36},{"krate":0,"index":48},{"krate":0,"index":51},{"krate":0,"index":53}],"decl_id":null,"docs":" Functions for decoding Base58 encoded strings.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":25},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/decode.rs","byte_start":9813,"byte_end":9826,"line_start":13,"line_end":13,"column_start":12,"column_end":25},"name":"DecodeBuilder","qualname":"::decode::DecodeBuilder","value":"DecodeBuilder {  }","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":31},{"krate":0,"index":32}],"decl_id":null,"docs":" A builder for setting up the alphabet and output of a base58 decode.","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/decode.rs","byte_start":9762,"byte_end":9801,"line_start":12,"line_end":12,"column_start":1,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":33},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/decode.rs","byte_start":10088,"byte_end":10099,"line_start":22,"line_end":22,"column_start":10,"column_end":21},"name":"DecodeError","qualname":"::decode::DecodeError","value":"Error","parent":null,"children":[],"decl_id":null,"docs":" Errors that could occur when decoding a Base58 encoded string.\n","sig":null,"attributes":[{"value":"deprecated(since = \"0.2.5\", note = \"Use `bs58::decode::Error` instead\")","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/decode.rs","byte_start":10004,"byte_end":10078,"line_start":21,"line_end":21,"column_start":1,"column_end":75}}]},{"kind":"Type","id":{"krate":0,"index":34},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/decode.rs","byte_start":10217,"byte_end":10223,"line_start":25,"line_end":25,"column_start":10,"column_end":16},"name":"Result","qualname":"::decode::Result","value":"::std::result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" A specialized [`Result`](std::result::Result) type for [`bs58::decode`](module@crate::decode)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":109},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/decode.rs","byte_start":10465,"byte_end":10479,"line_start":31,"line_end":31,"column_start":5,"column_end":19},"name":"BufferTooSmall","qualname":"::decode::Error::BufferTooSmall","value":"Error::BufferTooSmall","parent":{"krate":0,"index":108},"children":[],"decl_id":null,"docs":" The output buffer was too small to contain the entire input.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":111},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/decode.rs","byte_start":10584,"byte_end":10600,"line_start":35,"line_end":35,"column_start":5,"column_end":21},"name":"InvalidCharacter","qualname":"::decode::Error::InvalidCharacter","value":"Error::InvalidCharacter { character, index }","parent":{"krate":0,"index":108},"children":[],"decl_id":null,"docs":" The input contained a character that was not part of the current Base58\n alphabet.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":114},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/decode.rs","byte_start":10889,"byte_end":10906,"line_start":44,"line_end":44,"column_start":5,"column_end":22},"name":"NonAsciiCharacter","qualname":"::decode::Error::NonAsciiCharacter","value":"Error::NonAsciiCharacter { index }","parent":{"krate":0,"index":108},"children":[],"decl_id":null,"docs":" The input contained a multi-byte (or non-utf8) character which is\n unsupported by this Base58 decoder.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":116},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/decode.rs","byte_start":11708,"byte_end":11723,"line_start":73,"line_end":73,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::decode::Error::__NonExhaustive","value":"Error::__NonExhaustive","parent":{"krate":0,"index":108},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":108},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/decode.rs","byte_start":10384,"byte_end":10389,"line_start":29,"line_end":29,"column_start":10,"column_end":15},"name":"Error","qualname":"::decode::Error","value":"Error::{BufferTooSmall, InvalidCharacter, NonAsciiCharacter, __NonExhaustive}","parent":null,"children":[{"krate":0,"index":109},{"krate":0,"index":111},{"krate":0,"index":114},{"krate":0,"index":116}],"decl_id":null,"docs":" Errors that could occur when decoding a Base58 encoded string.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/decode.rs","byte_start":11949,"byte_end":11952,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"name":"new","qualname":"<DecodeBuilder>::new","value":"fn (input: I, alpha: &'a [u8; 58]) -> DecodeBuilder<'a, I>","parent":null,"children":[],"decl_id":null,"docs":" Setup decoder for the given string using the given alphabet.\n Preferably use [`bs58::decode`](../fn.decode.html) instead of this\n directly.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/decode.rs","byte_start":12529,"byte_end":12542,"line_start":96,"line_end":96,"column_start":12,"column_end":25},"name":"with_alphabet","qualname":"<DecodeBuilder>::with_alphabet","value":"fn <'b> (self, alpha: &'b [u8; 58]) -> DecodeBuilder<'b, I>","parent":null,"children":[],"decl_id":null,"docs":" Change the alphabet that will be used for decoding.","sig":null,"attributes":[{"value":"allow(needless_lifetimes)","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/decode.rs","byte_start":12444,"byte_end":12472,"line_start":95,"line_end":95,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/decode.rs","byte_start":13998,"byte_end":14006,"line_start":147,"line_end":147,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<DecodeBuilder>::into_vec","value":"fn (self) -> Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Decode into a new vector of bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/decode.rs","byte_start":14809,"byte_end":14813,"line_start":172,"line_end":172,"column_start":12,"column_end":16},"name":"into","qualname":"<DecodeBuilder>::into","value":"fn <O> (self, mut output: O) -> Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Decode into the given buffer.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":48},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/decode.rs","byte_start":16059,"byte_end":16070,"line_start":210,"line_end":210,"column_start":8,"column_end":19},"name":"decode_into","qualname":"::decode::decode_into","value":"fn (input: &[u8], output: &mut [u8], alpha: &[u8; 58]) -> Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Decode given string into given byte slice using the given alphabet.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":55},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/encode.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"encode","qualname":"::encode","value":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/encode.rs","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":64},{"krate":0,"index":74},{"krate":0,"index":76}],"decl_id":null,"docs":" Functions for encoding into Base58 encoded strings.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":57},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/encode.rs","byte_start":23543,"byte_end":23556,"line_start":7,"line_end":7,"column_start":12,"column_end":25},"name":"EncodeBuilder","qualname":"::encode::EncodeBuilder","value":"EncodeBuilder {  }","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":63}],"decl_id":null,"docs":" A builder for setting up the alphabet and output of a base58 encode.\n","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/encode.rs","byte_start":23492,"byte_end":23531,"line_start":6,"line_end":6,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/encode.rs","byte_start":23859,"byte_end":23862,"line_start":17,"line_end":17,"column_start":12,"column_end":15},"name":"new","qualname":"<EncodeBuilder>::new","value":"fn (input: I, alpha: &'a [u8; 58]) -> EncodeBuilder<'a, I>","parent":null,"children":[],"decl_id":null,"docs":" Setup encoder for the given string using the given alphabet.\n Preferably use [`bs58::encode`](../fn.encode.html) instead of this\n directly.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/encode.rs","byte_start":24435,"byte_end":24448,"line_start":34,"line_end":34,"column_start":12,"column_end":25},"name":"with_alphabet","qualname":"<EncodeBuilder>::with_alphabet","value":"fn <'b> (self, alpha: &'b [u8; 58]) -> EncodeBuilder<'b, I>","parent":null,"children":[],"decl_id":null,"docs":" Change the alphabet that will be used for encoding.","sig":null,"attributes":[{"value":"allow(needless_lifetimes)","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/encode.rs","byte_start":24350,"byte_end":24378,"line_start":33,"line_end":33,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/encode.rs","byte_start":25515,"byte_end":25526,"line_start":71,"line_end":71,"column_start":12,"column_end":23},"name":"into_string","qualname":"<EncodeBuilder>::into_string","value":"fn (self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Encode into a new owned string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/encode.rs","byte_start":26289,"byte_end":26293,"line_start":91,"line_end":91,"column_start":12,"column_end":16},"name":"into","qualname":"<EncodeBuilder>::into","value":"fn (self, output: &mut String) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Encode into the given string, any existing data will be cleared.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":74},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/encode.rs","byte_start":27306,"byte_end":27317,"line_start":122,"line_end":122,"column_start":8,"column_end":19},"name":"encode_into","qualname":"::encode::encode_into","value":"fn (input: &[u8], output: &mut String, alpha: &[u8; 58]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Encode given bytes into given string using the given alphabet, any existing\n data will be cleared.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":84},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/traits.rs","byte_start":30443,"byte_end":30451,"line_start":10,"line_end":10,"column_start":11,"column_end":19},"name":"ToBase58","qualname":"::traits::ToBase58","value":"ToBase58","parent":null,"children":[{"krate":0,"index":85},{"krate":0,"index":86}],"decl_id":null,"docs":" A trait for Base58 encoding bytes to an owned string.\n","sig":null,"attributes":[{"value":"allow(deprecated)","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/traits.rs","byte_start":30294,"byte_end":30314,"line_start":4,"line_end":4,"column_start":1,"column_end":21}},{"value":"deprecated(since = \"0.2.0\", note =\n             \"Use `bs58::encode` and associated functions instead\")","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/traits.rs","byte_start":30315,"byte_end":30417,"line_start":5,"line_end":8,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/traits.rs","byte_start":30608,"byte_end":30617,"line_start":14,"line_end":14,"column_start":8,"column_end":17},"name":"to_base58","qualname":"::traits::ToBase58::to_base58","value":"fn (&self) -> String","parent":{"krate":0,"index":84},"children":[],"decl_id":null,"docs":" Base58 encode `self` to an owned string using the [default alphabet][].","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/traits.rs","byte_start":30718,"byte_end":30741,"line_start":17,"line_end":17,"column_start":8,"column_end":31},"name":"to_base58_with_alphabet","qualname":"::traits::ToBase58::to_base58_with_alphabet","value":"fn (&self, alpha: &[u8; 58]) -> String","parent":{"krate":0,"index":84},"children":[],"decl_id":null,"docs":" Base58 encode `self` to an owned string using the given alphabet.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":88},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/traits.rs","byte_start":30999,"byte_end":31009,"line_start":27,"line_end":27,"column_start":11,"column_end":21},"name":"FromBase58","qualname":"::traits::FromBase58","value":"FromBase58","parent":null,"children":[{"krate":0,"index":89},{"krate":0,"index":90}],"decl_id":null,"docs":" A trait for decoding Base58 encoded values to a vector of bytes.\n","sig":null,"attributes":[{"value":"allow(deprecated)","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/traits.rs","byte_start":30850,"byte_end":30870,"line_start":21,"line_end":21,"column_start":1,"column_end":21}},{"value":"deprecated(since = \"0.2.0\", note =\n             \"Use `bs58::decode` and associated functions instead\")","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/traits.rs","byte_start":30871,"byte_end":30973,"line_start":22,"line_end":25,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/traits.rs","byte_start":31161,"byte_end":31172,"line_start":31,"line_end":31,"column_start":8,"column_end":19},"name":"from_base58","qualname":"::traits::FromBase58::from_base58","value":"fn (&self) -> decode::Result<Vec<u8>>","parent":{"krate":0,"index":88},"children":[],"decl_id":null,"docs":" Decode `self` to a vector of bytes using the [default alphabet][].","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/traits.rs","byte_start":31285,"byte_end":31310,"line_start":34,"line_end":34,"column_start":8,"column_end":33},"name":"from_base58_with_alphabet","qualname":"::traits::FromBase58::from_base58_with_alphabet","value":"fn (&self, alpha: &[u8; 58]) -> decode::Result<Vec<u8>>","parent":{"krate":0,"index":88},"children":[],"decl_id":null,"docs":" Decode `self` to a vector of bytes using the given alphabet.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":104},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/lib.rs","byte_start":4272,"byte_end":4278,"line_start":154,"line_end":154,"column_start":8,"column_end":14},"name":"decode","qualname":"::decode","value":"fn <I> (input: I) -> decode::DecodeBuilder<'static, I>","parent":null,"children":[],"decl_id":null,"docs":" Setup decoder for the given string using the [default alphabet][].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":106},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/lib.rs","byte_start":5266,"byte_end":5272,"line_start":190,"line_end":190,"column_start":8,"column_end":14},"name":"encode","qualname":"::encode","value":"fn <I> (input: I) -> encode::EncodeBuilder<'static, I>","parent":null,"children":[],"decl_id":null,"docs":" Setup encoder for the given bytes using the [default alphabet][].","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/decode.rs","byte_start":11753,"byte_end":11766,"line_start":76,"line_end":76,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":39},{"krate":0,"index":41},{"krate":0,"index":44},{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/decode.rs","byte_start":19499,"byte_end":19504,"line_start":318,"line_end":318,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/decode.rs","byte_start":20540,"byte_end":20545,"line_start":341,"line_end":341,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/encode.rs","byte_start":23663,"byte_end":23676,"line_start":13,"line_end":13,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":69},{"krate":0,"index":72},{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/lib.rs","byte_start":2472,"byte_end":2480,"line_start":80,"line_end":80,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":12}},{"kind":"Mod","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/lib.rs","byte_start":2491,"byte_end":2497,"line_start":82,"line_end":82,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":23}},{"kind":"Mod","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/lib.rs","byte_start":2507,"byte_end":2513,"line_start":83,"line_end":83,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":55}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/decode.rs","byte_start":11753,"byte_end":11766,"line_start":76,"line_end":76,"column_start":26,"column_end":39},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":25},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/decode.rs","byte_start":19499,"byte_end":19504,"line_start":318,"line_end":318,"column_start":30,"column_end":35},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":108},"to":{"krate":1,"index":1559}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/decode.rs","byte_start":20540,"byte_end":20545,"line_start":341,"line_end":341,"column_start":23,"column_end":28},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":108},"to":{"krate":2,"index":7190}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/bs58-0.2.5/src/encode.rs","byte_start":23663,"byte_end":23676,"line_start":13,"line_end":13,"column_start":26,"column_end":39},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":57},"to":{"krate":4294967295,"index":4294967295}}]}