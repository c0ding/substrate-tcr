{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/base58-0.1.0","program":"/home/gautam/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","base58","/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/base58-0.1.0/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=454e96831334d8e9","-C","extra-filename=-454e96831334d8e9","--out-dir","/home/gautam/code/substrate-tcr/target/rls/debug/deps","-L","dependency=/home/gautam/code/substrate-tcr/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/gautam/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/gautam/code/substrate-tcr/target/rls/debug/deps/libbase58-454e96831334d8e9.rmeta"},"prelude":{"crate_id":{"name":"base58","disambiguator":[14726182449045236969,2844015538821570259]},"crate_root":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/base58-0.1.0/src","external_crates":[{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/base58-0.1.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[4418738106075590160,6298063093324017560]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/base58-0.1.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[9113878364975505769,4626460723841361367]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/base58-0.1.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10636203250160794641,6979396832464280682]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/base58-0.1.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7259142600435629501,12221323364939802703]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/base58-0.1.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[245280942947536957,12219005383890086938]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/base58-0.1.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6161946279237914842,16521306710208745576]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/base58-0.1.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[6542909105960794691,9677219093962929367]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/base58-0.1.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[5468829561226316808,7834745881253856659]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/base58-0.1.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[17700629721805382410,8884445337419759755]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/base58-0.1.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5673318663856259921,7992701887106127366]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/base58-0.1.0/src/lib.rs","num":11,"id":{"name":"backtrace","disambiguator":[14096840682646779984,4894716104918169263]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/base58-0.1.0/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[17167590092810160364,15681868143498786567]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/base58-0.1.0/src/lib.rs","num":13,"id":{"name":"backtrace_sys","disambiguator":[9809686796458150241,12960706147778414440]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/base58-0.1.0/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[14218938340851961837,11099897245983054425]}}],"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/base58-0.1.0/src/lib.rs","byte_start":0,"byte_end":6477,"line_start":1,"line_end":227,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/base58-0.1.0/src/lib.rs","byte_start":0,"byte_end":6477,"line_start":1,"line_end":227,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/base58-0.1.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":28},{"krate":0,"index":38},{"krate":0,"index":35},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":22}],"decl_id":null,"docs":" Base58-to-text encoding","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":29},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/base58-0.1.0/src/lib.rs","byte_start":902,"byte_end":924,"line_start":24,"line_end":24,"column_start":2,"column_end":24},"name":"InvalidBase58Character","qualname":"::FromBase58Error::InvalidBase58Character","value":"FromBase58Error::InvalidBase58Character(char, usize)","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" The input contained a character which is not a part of the base58 format.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":33},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/base58-0.1.0/src/lib.rs","byte_start":975,"byte_end":994,"line_start":26,"line_end":26,"column_start":2,"column_end":21},"name":"InvalidBase58Length","qualname":"::FromBase58Error::InvalidBase58Length","value":"FromBase58Error::InvalidBase58Length","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" The input had invalid length.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":28},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/base58-0.1.0/src/lib.rs","byte_start":804,"byte_end":819,"line_start":22,"line_end":22,"column_start":10,"column_end":25},"name":"FromBase58Error","qualname":"::FromBase58Error","value":"FromBase58Error::{InvalidBase58Character, InvalidBase58Length}","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":33}],"decl_id":null,"docs":" Errors that can occur when decoding base58 encoded string.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":14},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/base58-0.1.0/src/lib.rs","byte_start":1070,"byte_end":1078,"line_start":30,"line_end":30,"column_start":11,"column_end":19},"name":"ToBase58","qualname":"::ToBase58","value":"ToBase58","parent":null,"children":[{"krate":0,"index":15}],"decl_id":null,"docs":" A trait for converting a value to base58 encoded string.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":15},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/base58-0.1.0/src/lib.rs","byte_start":1164,"byte_end":1173,"line_start":32,"line_end":32,"column_start":5,"column_end":14},"name":"to_base58","qualname":"::ToBase58::to_base58","value":"fn (&self) -> String","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Converts a value of `self` to a base58 value, returning the owned string.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":16},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/base58-0.1.0/src/lib.rs","byte_start":1255,"byte_end":1265,"line_start":36,"line_end":36,"column_start":11,"column_end":21},"name":"FromBase58","qualname":"::FromBase58","value":"FromBase58","parent":null,"children":[{"krate":0,"index":17}],"decl_id":null,"docs":" A trait for converting base58 encoded values.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/base58-0.1.0/src/lib.rs","byte_start":1391,"byte_end":1402,"line_start":38,"line_end":38,"column_start":5,"column_end":16},"name":"from_base58","qualname":"::FromBase58::from_base58","value":"fn (&self) -> Result<Vec<u8>, FromBase58Error>","parent":{"krate":0,"index":16},"children":[],"decl_id":null,"docs":" Convert a value of `self`, interpreted as base58 encoded data, into an owned vector of bytes, returning a vector.\n","sig":null,"attributes":[]}],"impls":[],"refs":[],"macro_refs":[],"relations":[]}