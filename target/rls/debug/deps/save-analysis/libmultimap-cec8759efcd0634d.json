{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0","program":"/home/gautam/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","multimap","/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts","--crate-type","lib","--emit=dep-info,metadata,link","-C","debuginfo=2","-C","metadata=cec8759efcd0634d","-C","extra-filename=-cec8759efcd0634d","--out-dir","/home/gautam/code/substrate-tcr/target/rls/debug/deps","-L","dependency=/home/gautam/code/substrate-tcr/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/gautam/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/gautam/code/substrate-tcr/target/rls/debug/deps/libmultimap-cec8759efcd0634d.rmeta"},"prelude":{"crate_id":{"name":"multimap","disambiguator":[11017495352014207527,15849840742024747010]},"crate_root":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src","external_crates":[{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[4418738106075590160,6298063093324017560]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[9113878364975505769,4626460723841361367]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10636203250160794641,6979396832464280682]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7259142600435629501,12221323364939802703]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[245280942947536957,12219005383890086938]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6161946279237914842,16521306710208745576]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[6542909105960794691,9677219093962929367]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[5468829561226316808,7834745881253856659]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[17700629721805382410,8884445337419759755]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5673318663856259921,7992701887106127366]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","num":11,"id":{"name":"backtrace","disambiguator":[14096840682646779984,4894716104918169263]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[17167590092810160364,15681868143498786567]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","num":13,"id":{"name":"backtrace_sys","disambiguator":[9809686796458150241,12960706147778414440]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[14218938340851961837,11099897245983054425]}}],"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":390,"byte_end":30967,"line_start":9,"line_end":1154,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":1,"index":627},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":2717,"byte_end":2721,"line_start":74,"line_end":74,"column_start":37,"column_end":41},"alias_span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":2725,"byte_end":2732,"line_start":74,"line_end":74,"column_start":45,"column_end":52},"name":"IterAll","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":1,"index":640},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":2771,"byte_end":2778,"line_start":75,"line_end":75,"column_start":37,"column_end":44},"alias_span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":2782,"byte_end":2792,"line_start":75,"line_end":75,"column_start":48,"column_end":58},"name":"IterAllMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":45},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":2813,"byte_end":2818,"line_start":77,"line_end":77,"column_start":17,"column_end":22},"alias_span":null,"name":"Entry","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":35},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":2820,"byte_end":2833,"line_start":77,"line_end":77,"column_start":24,"column_end":37},"alias_span":null,"name":"OccupiedEntry","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":40},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":2835,"byte_end":2846,"line_start":77,"line_end":77,"column_start":39,"column_end":50},"alias_span":null,"name":"VacantEntry","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":390,"byte_end":30967,"line_start":9,"line_end":1154,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":32},{"krate":0,"index":218},{"krate":0,"index":222},{"krate":0,"index":80},{"krate":0,"index":112},{"krate":0,"index":120},{"krate":0,"index":124},{"krate":0,"index":130},{"krate":0,"index":133},{"krate":0,"index":137},{"krate":0,"index":142},{"krate":0,"index":149},{"krate":0,"index":156},{"krate":0,"index":162},{"krate":0,"index":167},{"krate":0,"index":174},{"krate":0,"index":179},{"krate":0,"index":226},{"krate":0,"index":231},{"krate":0,"index":186},{"krate":0,"index":194},{"krate":0,"index":199},{"krate":0,"index":204},{"krate":0,"index":212},{"krate":0,"index":217}],"decl_id":null,"docs":" A MultiMap implementation which is just a wrapper around std::collections::HashMap.\n See HashMap's documentation for more details.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":35},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/entry.rs","byte_start":31574,"byte_end":31587,"line_start":13,"line_end":13,"column_start":12,"column_end":25},"name":"OccupiedEntry","qualname":"::entry::OccupiedEntry","value":"OccupiedEntry { inner }","parent":null,"children":[{"krate":0,"index":39}],"decl_id":null,"docs":" A view into a single occupied location in a MultiMap.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":39},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/entry.rs","byte_start":31637,"byte_end":31642,"line_start":15,"line_end":15,"column_start":9,"column_end":14},"name":"inner","qualname":"::entry::OccupiedEntry::inner","value":"std::collections::hash_map::OccupiedEntry<'a, K, std::vec::Vec<V>>","parent":{"krate":0,"index":35},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":40},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/entry.rs","byte_start":31754,"byte_end":31765,"line_start":19,"line_end":19,"column_start":12,"column_end":23},"name":"VacantEntry","qualname":"::entry::VacantEntry","value":"VacantEntry { inner }","parent":null,"children":[{"krate":0,"index":44}],"decl_id":null,"docs":" A view into a single empty location in a MultiMap.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":44},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/entry.rs","byte_start":31815,"byte_end":31820,"line_start":21,"line_end":21,"column_start":9,"column_end":14},"name":"inner","qualname":"::entry::VacantEntry::inner","value":"std::collections::hash_map::VacantEntry<'a, K, std::vec::Vec<V>>","parent":{"krate":0,"index":40},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":49},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/entry.rs","byte_start":32009,"byte_end":32017,"line_start":27,"line_end":27,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::entry::Entry::Occupied","value":"Entry::Occupied(OccupiedEntry<'a, K, V>)","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" An occupied Entry.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":52},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/entry.rs","byte_start":32076,"byte_end":32082,"line_start":30,"line_end":30,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::entry::Entry::Vacant","value":"Entry::Vacant(VacantEntry<'a, K, V>)","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" A vacant Entry.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":45},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/entry.rs","byte_start":31950,"byte_end":31955,"line_start":25,"line_end":25,"column_start":10,"column_end":15},"name":"Entry","qualname":"::entry::Entry","value":"Entry::{Occupied, Vacant}","parent":null,"children":[{"krate":0,"index":49},{"krate":0,"index":52}],"decl_id":null,"docs":" A view into a single location in a map, which may be vacant or occupied.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/entry.rs","byte_start":32265,"byte_end":32268,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"get","qualname":"<OccupiedEntry>::get","value":"fn (&self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the first item in value in the vector corresponding to entry.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/entry.rs","byte_start":32408,"byte_end":32415,"line_start":40,"line_end":40,"column_start":12,"column_end":19},"name":"get_vec","qualname":"<OccupiedEntry>::get_vec","value":"fn (&self) -> &Vec<V>","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the values (vector) corresponding to entry.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/entry.rs","byte_start":32578,"byte_end":32585,"line_start":45,"line_end":45,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<OccupiedEntry>::get_mut","value":"fn (&mut self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Gets a mut reference to the first item in value in the vector corresponding to entry.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/entry.rs","byte_start":32745,"byte_end":32756,"line_start":50,"line_end":50,"column_start":12,"column_end":23},"name":"get_vec_mut","qualname":"<OccupiedEntry>::get_vec_mut","value":"fn (&mut self) -> &mut Vec<V>","parent":null,"children":[],"decl_id":null,"docs":" Gets a mut reference to the values (vector) corresponding to entry.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/entry.rs","byte_start":32986,"byte_end":32994,"line_start":56,"line_end":56,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<OccupiedEntry>::into_mut","value":"fn (self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntry into a mutable reference to the first item in value in the entry\n with a lifetime bound to the map itself\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/entry.rs","byte_start":33222,"byte_end":33234,"line_start":62,"line_end":62,"column_start":12,"column_end":24},"name":"into_vec_mut","qualname":"<OccupiedEntry>::into_vec_mut","value":"fn (self) -> &'a mut Vec<V>","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntry into a mutable reference to the values (vector) in the entry\n with a lifetime bound to the map itself\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/entry.rs","byte_start":33372,"byte_end":33378,"line_start":67,"line_end":67,"column_start":12,"column_end":18},"name":"insert","qualname":"<OccupiedEntry>::insert","value":"fn (&mut self, value: V) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Inserts a new value onto the vector of the entry.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/entry.rs","byte_start":33528,"byte_end":33538,"line_start":72,"line_end":72,"column_start":12,"column_end":22},"name":"insert_vec","qualname":"<OccupiedEntry>::insert_vec","value":"fn (&mut self, values: Vec<V>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Extends the existing vector with the specified values.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/entry.rs","byte_start":33701,"byte_end":33707,"line_start":77,"line_end":77,"column_start":12,"column_end":18},"name":"remove","qualname":"<OccupiedEntry>::remove","value":"fn (self) -> Vec<V>","parent":null,"children":[],"decl_id":null,"docs":" Takes the values (vector) out of the entry, and returns it\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/entry.rs","byte_start":33960,"byte_end":33966,"line_start":85,"line_end":85,"column_start":12,"column_end":18},"name":"insert","qualname":"<VacantEntry>::insert","value":"fn (self, value: V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Sets the first value in the vector of the entry with the VacantEntry's key,\n and returns a mutable reference to it.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/entry.rs","byte_start":34177,"byte_end":34187,"line_start":91,"line_end":91,"column_start":12,"column_end":22},"name":"insert_vec","qualname":"<VacantEntry>::insert_vec","value":"fn (self, values: Vec<V>) -> &'a mut Vec<V>","parent":null,"children":[],"decl_id":null,"docs":" Sets values in the entry with the VacantEntry's key,\n and returns a mutable reference to it.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/entry.rs","byte_start":34592,"byte_end":34601,"line_start":101,"line_end":101,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<Entry>::or_insert","value":"fn (self, default: V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default if empty, and returns\n a mutable reference to the value in the entry. This will return a mutable reference to the\n first value in the vector corresponding to the specified key.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/entry.rs","byte_start":35015,"byte_end":35028,"line_start":111,"line_end":111,"column_start":12,"column_end":25},"name":"or_insert_vec","qualname":"<Entry>::or_insert_vec","value":"fn (self, defaults: Vec<V>) -> &'a mut Vec<V>","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default values if empty, and returns\n a mutable reference to the values (the corresponding vector to the specified key) in\n the entry.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":218},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":2945,"byte_end":2953,"line_start":85,"line_end":85,"column_start":12,"column_end":20},"name":"MultiMap","qualname":"::MultiMap","value":"MultiMap {  }","parent":null,"children":[{"krate":0,"index":221}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":3269,"byte_end":3272,"line_start":101,"line_end":101,"column_start":12,"column_end":15},"name":"new","qualname":"<MultiMap<K, V>>::new","value":"fn () -> MultiMap<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty MultiMap","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":3609,"byte_end":3622,"line_start":114,"line_end":114,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<MultiMap<K, V>>::with_capacity","value":"fn (capacity: usize) -> MultiMap<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty multimap with the given initial capacity.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":4155,"byte_end":4161,"line_start":130,"line_end":130,"column_start":12,"column_end":18},"name":"insert","qualname":"<MultiMap<K, V>>::insert","value":"fn (&mut self, k: K, v: V) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Inserts a key-value pair into the multimap. If the key does exists in\n the map then the key is pushed to that key's vector. If the key doesn't\n exists in the map a new vector with the given value is inserted.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":4955,"byte_end":4967,"line_start":156,"line_end":156,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<MultiMap<K, V>>::contains_key","value":"fn <Q> (&self, k: &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains a value for the specified key.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":5413,"byte_end":5416,"line_start":175,"line_end":175,"column_start":12,"column_end":15},"name":"len","qualname":"<MultiMap<K, V>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the map.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":6069,"byte_end":6075,"line_start":196,"line_end":196,"column_start":12,"column_end":18},"name":"remove","qualname":"<MultiMap<K, V>>::remove","value":"fn <Q> (&mut self, k: &Q) -> Option<Vec<V>>","parent":null,"children":[],"decl_id":null,"docs":" Removes a key from the map, returning the vector of values at\n the key if the key was previously in the map.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":6738,"byte_end":6741,"line_start":219,"line_end":219,"column_start":12,"column_end":15},"name":"get","qualname":"<MultiMap<K, V>>::get","value":"fn <Q> (&self, k: &Q) -> Option<&V>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the first item in the vector corresponding to\n the key.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":7482,"byte_end":7489,"line_start":245,"line_end":245,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<MultiMap<K, V>>::get_mut","value":"fn <Q> (&mut self, k: &Q) -> Option<&mut V>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the first item in the vector corresponding to\n the key.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":8177,"byte_end":8184,"line_start":267,"line_end":267,"column_start":12,"column_end":19},"name":"get_vec","qualname":"<MultiMap<K, V>>::get_vec","value":"fn <Q> (&self, k: &Q) -> Option<&Vec<V>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the vector corresponding to the key.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":8957,"byte_end":8968,"line_start":293,"line_end":293,"column_start":12,"column_end":23},"name":"get_vec_mut","qualname":"<MultiMap<K, V>>::get_vec_mut","value":"fn <Q> (&mut self, k: &Q) -> Option<&mut Vec<V>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the vector corresponding to the key.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":9421,"byte_end":9429,"line_start":310,"line_end":310,"column_start":12,"column_end":20},"name":"capacity","qualname":"<MultiMap<K, V>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the map can hold without reallocating.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":9797,"byte_end":9805,"line_start":326,"line_end":326,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<MultiMap<K, V>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains no elements.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":10206,"byte_end":10211,"line_start":343,"line_end":343,"column_start":12,"column_end":17},"name":"clear","qualname":"<MultiMap<K, V>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears the map, removing all key-value pairs.\n Keeps the allocated memory for reuse.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":10695,"byte_end":10699,"line_start":364,"line_end":364,"column_start":12,"column_end":16},"name":"keys","qualname":"<MultiMap<K, V>>::keys","value":"fn <'a> (&'a self) -> Keys<'a, K, Vec<V>>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all keys in arbitrary order.\n Iterator element type is &'a K.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":11398,"byte_end":11402,"line_start":387,"line_end":387,"column_start":12,"column_end":16},"name":"iter","qualname":"<MultiMap<K, V>>::iter","value":"fn (&self) -> Iter<K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order. The iterator returns\n a reference to the key and the first element in the corresponding key's vector.\n Iterator element type is (&'a K, &'a V).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":12223,"byte_end":12231,"line_start":414,"line_end":414,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<MultiMap<K, V>>::iter_mut","value":"fn (&mut self) -> IterMut<K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order. The iterator returns\n a reference to the key and a mutable reference to the first element in the\n corresponding key's vector. Iterator element type is (&'a K, &'a mut V).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":12932,"byte_end":12940,"line_start":437,"line_end":437,"column_start":12,"column_end":20},"name":"iter_all","qualname":"<MultiMap<K, V>>::iter_all","value":"fn (&self) -> IterAll<K, Vec<V>>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order. The iterator returns\n a reference to the key and the corresponding key's vector.\n Iterator element type is (&'a K, &'a V).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":13781,"byte_end":13793,"line_start":466,"line_end":466,"column_start":12,"column_end":24},"name":"iter_all_mut","qualname":"<MultiMap<K, V>>::iter_all_mut","value":"fn (&mut self) -> IterAllMut<K, Vec<V>>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order. The iterator returns\n a reference to the key and the corresponding key's vector.\n Iterator element type is (&'a K, &'a V).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":14740,"byte_end":14745,"line_start":498,"line_end":498,"column_start":12,"column_end":17},"name":"entry","qualname":"<MultiMap<K, V>>::entry","value":"fn (&mut self, k: K) -> Entry<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Gets the specified key's corresponding entry in the map for in-place manipulation.\n It's possible to both manipulate the vector and the 'value' (the first value in the\n vector).","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":226},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":18718,"byte_end":18722,"line_start":652,"line_end":652,"column_start":12,"column_end":16},"name":"Iter","qualname":"::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":230}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":199},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":19210,"byte_end":19217,"line_start":674,"line_end":674,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":203}],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/entry.rs","byte_start":32136,"byte_end":32149,"line_start":33,"line_end":33,"column_start":24,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/entry.rs","byte_start":33791,"byte_end":33802,"line_start":82,"line_end":82,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":72},{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/entry.rs","byte_start":34303,"byte_end":34308,"line_start":97,"line_end":97,"column_start":24,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":3011,"byte_end":3019,"line_start":89,"line_end":89,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":91},{"krate":0,"index":94},{"krate":0,"index":97},{"krate":0,"index":99},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":15132,"byte_end":15140,"line_start":507,"line_end":507,"column_start":44,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":118}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":15430,"byte_end":15438,"line_start":521,"line_end":521,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":123}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":15656,"byte_end":15664,"line_start":530,"line_end":530,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":15982,"byte_end":15990,"line_start":543,"line_end":543,"column_start":19,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":16071,"byte_end":16079,"line_start":549,"line_end":549,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":16248,"byte_end":16256,"line_start":557,"line_end":557,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":17184,"byte_end":17192,"line_start":595,"line_end":595,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":17424,"byte_end":17432,"line_start":606,"line_end":606,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":165}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":17663,"byte_end":17671,"line_start":616,"line_end":616,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":17932,"byte_end":17940,"line_start":625,"line_end":625,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":18438,"byte_end":18446,"line_start":642,"line_end":642,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":183}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":18813,"byte_end":18817,"line_start":656,"line_end":656,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":19113,"byte_end":19117,"line_start":668,"line_end":668,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":19311,"byte_end":19318,"line_start":678,"line_end":678,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":211}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":19626,"byte_end":19633,"line_start":690,"line_end":690,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":216}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/entry.rs","byte_start":32136,"byte_end":32149,"line_start":33,"line_end":33,"column_start":24,"column_end":37},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":35},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/entry.rs","byte_start":33791,"byte_end":33802,"line_start":82,"line_end":82,"column_start":24,"column_end":35},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":40},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/entry.rs","byte_start":34303,"byte_end":34308,"line_start":97,"line_end":97,"column_start":24,"column_end":29},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":45},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":3011,"byte_end":3019,"line_start":89,"line_end":89,"column_start":12,"column_end":20},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":218},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":15132,"byte_end":15140,"line_start":507,"line_end":507,"column_start":44,"column_end":52},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":218},"to":{"krate":2,"index":1780}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":15430,"byte_end":15438,"line_start":521,"line_end":521,"column_start":22,"column_end":30},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":218},"to":{"krate":2,"index":7185}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":15656,"byte_end":15664,"line_start":530,"line_end":530,"column_start":26,"column_end":34},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":218},"to":{"krate":2,"index":2040}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":15982,"byte_end":15990,"line_start":543,"line_end":543,"column_start":19,"column_end":27},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":218},"to":{"krate":2,"index":2045}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":16071,"byte_end":16079,"line_start":549,"line_end":549,"column_start":24,"column_end":32},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":218},"to":{"krate":2,"index":2189}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":16248,"byte_end":16256,"line_start":557,"line_end":557,"column_start":37,"column_end":45},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":218},"to":{"krate":2,"index":3699}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":17184,"byte_end":17192,"line_start":595,"line_end":595,"column_start":29,"column_end":37},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":218},"to":{"krate":2,"index":3703}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":17424,"byte_end":17432,"line_start":606,"line_end":606,"column_start":31,"column_end":39},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":218},"to":{"krate":2,"index":3712}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":17663,"byte_end":17671,"line_start":616,"line_end":616,"column_start":43,"column_end":51},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":218},"to":{"krate":2,"index":3712}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":17932,"byte_end":17940,"line_start":625,"line_end":625,"column_start":36,"column_end":44},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":218},"to":{"krate":2,"index":3712}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":18438,"byte_end":18446,"line_start":642,"line_end":642,"column_start":48,"column_end":56},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":218},"to":{"krate":2,"index":3712}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":18813,"byte_end":18817,"line_start":656,"line_end":656,"column_start":29,"column_end":33},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":226},"to":{"krate":2,"index":3496}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":19113,"byte_end":19117,"line_start":668,"line_end":668,"column_start":38,"column_end":42},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":226},"to":{"krate":2,"index":3691}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":19311,"byte_end":19318,"line_start":678,"line_end":678,"column_start":29,"column_end":36},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":199},"to":{"krate":2,"index":3496}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/multimap-0.4.0/src/lib.rs","byte_start":19626,"byte_end":19633,"line_start":690,"line_end":690,"column_start":38,"column_end":45},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":199},"to":{"krate":2,"index":3691}}]}