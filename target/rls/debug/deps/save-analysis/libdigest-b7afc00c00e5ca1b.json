{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2","program":"/home/gautam/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","digest","/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=b7afc00c00e5ca1b","-C","extra-filename=-b7afc00c00e5ca1b","--out-dir","/home/gautam/code/substrate-tcr/target/rls/debug/deps","-L","dependency=/home/gautam/code/substrate-tcr/target/rls/debug/deps","--extern","generic_array=/home/gautam/code/substrate-tcr/target/rls/debug/deps/libgeneric_array-1d682171183ad44d.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/gautam/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/gautam/code/substrate-tcr/target/rls/debug/deps/libdigest-b7afc00c00e5ca1b.rmeta"},"prelude":{"crate_id":{"name":"digest","disambiguator":[10120683713828531496,2393952183190226457]},"crate_root":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src","external_crates":[{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[9113878364975505769,4626460723841361367]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[10636203250160794641,6979396832464280682]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[7259142600435629501,12221323364939802703]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/lib.rs","num":4,"id":{"name":"generic_array","disambiguator":[8203024666061026802,3026709728683109158]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/lib.rs","num":5,"id":{"name":"typenum","disambiguator":[12989350392175717619,11979469666288565117]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/lib.rs","num":6,"id":{"name":"nodrop","disambiguator":[3279339378067962261,4959362604489401242]}}],"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/lib.rs","byte_start":0,"byte_end":2718,"line_start":1,"line_end":79,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":25},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/lib.rs","byte_start":464,"byte_end":470,"line_start":16,"line_end":16,"column_start":17,"column_end":23},"alias_span":null,"name":"Digest","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/lib.rs","byte_start":0,"byte_end":2718,"line_start":1,"line_end":79,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":51},{"krate":0,"index":69},{"krate":0,"index":68},{"krate":0,"index":66},{"krate":0,"index":64},{"krate":0,"index":62},{"krate":0,"index":59},{"krate":0,"index":57},{"krate":0,"index":55},{"krate":0,"index":53},{"krate":0,"index":41},{"krate":0,"index":43},{"krate":0,"index":45},{"krate":0,"index":48}],"decl_id":null,"docs":" This crate provides traits for describing funcionality of cryptographic hash\n functions.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/lib.rs","byte_start":307,"byte_end":313,"line_start":7,"line_end":7,"column_start":35,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":25},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/digest.rs","byte_start":3107,"byte_end":3113,"line_start":11,"line_end":11,"column_start":11,"column_end":17},"name":"Digest","qualname":"::digest::Digest","value":"Digest: Input + BlockInput + FixedOutput + Default","parent":null,"children":[{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30}],"decl_id":null,"docs":" The Digest trait specifies an interface common to digest functions. It's a\n convinience wrapper around `Input`, `FixedOutput`, `BlockInput` and\n `Default` traits. It also provides additional convinience methods.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/digest.rs","byte_start":3202,"byte_end":3205,"line_start":13,"line_end":13,"column_start":8,"column_end":11},"name":"new","qualname":"::digest::Digest::new","value":"fn () -> Self","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" Create new hasher instance\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/digest.rs","byte_start":3361,"byte_end":3366,"line_start":19,"line_end":19,"column_start":8,"column_end":13},"name":"input","qualname":"::digest::Digest::input","value":"fn (&mut self, input: &[u8]) -> ()","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" Digest input data. This method can be called repeatedly\n for use with streaming messages.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/digest.rs","byte_start":3511,"byte_end":3517,"line_start":24,"line_end":24,"column_start":8,"column_end":14},"name":"result","qualname":"::digest::Digest::result","value":"fn (self) -> Output<Self::OutputSize>","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" Retrieve the digest result. This method consumes digest instance.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/digest.rs","byte_start":3873,"byte_end":3879,"line_start":37,"line_end":37,"column_start":8,"column_end":14},"name":"digest","qualname":"::digest::Digest::digest","value":"fn (data: &[u8]) -> Output<Self::OutputSize>","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" Convinience function to compute hash of the `data`. It will handle\n hasher creation, data feeding and finalization.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/digest.rs","byte_start":3856,"byte_end":3865,"line_start":36,"line_end":36,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/digest.rs","byte_start":4175,"byte_end":4185,"line_start":46,"line_end":46,"column_start":8,"column_end":18},"name":"digest_str","qualname":"::digest::Digest::digest_str","value":"fn (str: &str) -> Output<Self::OutputSize>","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" Convinience function to compute hash of the string. It's equivalent to\n `digest(input_string.as_bytes())`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/digest.rs","byte_start":4158,"byte_end":4167,"line_start":45,"line_end":45,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":34},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/lib.rs","byte_start":641,"byte_end":646,"line_start":22,"line_end":22,"column_start":11,"column_end":16},"name":"Input","qualname":"::Input","value":"Input","parent":null,"children":[{"krate":0,"index":35}],"decl_id":null,"docs":" Trait for processing input data\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/lib.rs","byte_start":761,"byte_end":768,"line_start":25,"line_end":25,"column_start":8,"column_end":15},"name":"process","qualname":"::Input::process","value":"fn (&mut self, input: &[u8]) -> ()","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Digest input data. This method can be called repeatedly\n for use with streaming messages.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":36},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/lib.rs","byte_start":964,"byte_end":974,"line_start":30,"line_end":30,"column_start":11,"column_end":21},"name":"BlockInput","qualname":"::BlockInput","value":"BlockInput","parent":null,"children":[{"krate":0,"index":37}],"decl_id":null,"docs":" Trait to indicate that digest function processes data in blocks of size\n `BlockSize`. Main usage of this trait is for implementing HMAC generically.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":37},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/lib.rs","byte_start":986,"byte_end":995,"line_start":31,"line_end":31,"column_start":10,"column_end":19},"name":"BlockSize","qualname":"::BlockInput::BlockSize","value":"type BlockSize: ArrayLength<u8>;","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":38},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/lib.rs","byte_start":1085,"byte_end":1096,"line_start":35,"line_end":35,"column_start":11,"column_end":22},"name":"FixedOutput","qualname":"::FixedOutput","value":"FixedOutput","parent":null,"children":[{"krate":0,"index":39},{"krate":0,"index":40}],"decl_id":null,"docs":" Trait for returning digest result with the fixed size\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":39},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/lib.rs","byte_start":1108,"byte_end":1118,"line_start":36,"line_end":36,"column_start":10,"column_end":20},"name":"OutputSize","qualname":"::FixedOutput::OutputSize","value":"type OutputSize: ArrayLength<u8>;","parent":{"krate":0,"index":38},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/lib.rs","byte_start":1219,"byte_end":1231,"line_start":39,"line_end":39,"column_start":8,"column_end":20},"name":"fixed_result","qualname":"::FixedOutput::fixed_result","value":"fn (self) -> GenericArray<u8, Self::OutputSize>","parent":{"krate":0,"index":38},"children":[],"decl_id":null,"docs":" Retrieve the digest result. This method consumes digest instance.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":51},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/lib.rs","byte_start":1414,"byte_end":1427,"line_start":44,"line_end":44,"column_start":12,"column_end":25},"name":"InvalidLength","qualname":"::InvalidLength","value":"","parent":null,"children":[],"decl_id":null,"docs":" The error type for variable digest output\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":41},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/lib.rs","byte_start":1501,"byte_end":1515,"line_start":47,"line_end":47,"column_start":11,"column_end":25},"name":"VariableOutput","qualname":"::VariableOutput","value":"VariableOutput","parent":null,"children":[{"krate":0,"index":42}],"decl_id":null,"docs":" Trait for returning digest result with the varaible size\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/lib.rs","byte_start":1764,"byte_end":1779,"line_start":53,"line_end":53,"column_start":8,"column_end":23},"name":"variable_result","qualname":"::VariableOutput::variable_result","value":"fn (self, buffer: &mut [u8]) -> Result<&[u8], InvalidLength>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Retrieve the digest result into provided buffer. Length of the output\n equals to the input buffer size. In case of invalid length\n `Err(InvalidLength)` will be returned.\n This method consumes digest instance.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":43},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/lib.rs","byte_start":1974,"byte_end":1983,"line_start":58,"line_end":58,"column_start":11,"column_end":20},"name":"XofReader","qualname":"::XofReader","value":"XofReader: core::marker::Sized","parent":null,"children":[{"krate":0,"index":44}],"decl_id":null,"docs":" Trait for decribing readers which are used to extract extendable output\n from the resulting state of hash function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/lib.rs","byte_start":2094,"byte_end":2098,"line_start":60,"line_end":60,"column_start":8,"column_end":12},"name":"read","qualname":"::XofReader::read","value":"fn (&mut self, buffer: &mut [u8]) -> ()","parent":{"krate":0,"index":43},"children":[],"decl_id":null,"docs":" Read output into the `buffer`. Can be called unlimited number of times.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":45},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/lib.rs","byte_start":2343,"byte_end":2359,"line_start":66,"line_end":66,"column_start":11,"column_end":27},"name":"ExtendableOutput","qualname":"::ExtendableOutput","value":"ExtendableOutput","parent":null,"children":[{"krate":0,"index":46},{"krate":0,"index":47}],"decl_id":null,"docs":" Trait which describes extendable output (XOF) of hash functions. Using this\n trait you first need to get structure which implements `XofReader`, using\n which you can read extendable output.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":46},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/lib.rs","byte_start":2371,"byte_end":2377,"line_start":67,"line_end":67,"column_start":10,"column_end":16},"name":"Reader","qualname":"::ExtendableOutput::Reader","value":"type Reader: XofReader;","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/lib.rs","byte_start":2451,"byte_end":2461,"line_start":70,"line_end":70,"column_start":8,"column_end":18},"name":"xof_result","qualname":"::ExtendableOutput::xof_result","value":"fn (self) -> Self::Reader","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" Finalize hash function and return XOF reader\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/digest.rs","byte_start":5255,"byte_end":5256,"line_start":84,"line_end":84,"column_start":64,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/lib.rs","byte_start":2533,"byte_end":2534,"line_start":73,"line_end":73,"column_start":46,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/digest.rs","byte_start":3115,"byte_end":3120,"line_start":11,"line_end":11,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":0,"index":34},"to":{"krate":0,"index":25}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/digest.rs","byte_start":3123,"byte_end":3133,"line_start":11,"line_end":11,"column_start":27,"column_end":37},"kind":"SuperTrait","from":{"krate":0,"index":36},"to":{"krate":0,"index":25}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/digest.rs","byte_start":3136,"byte_end":3147,"line_start":11,"line_end":11,"column_start":40,"column_end":51},"kind":"SuperTrait","from":{"krate":0,"index":38},"to":{"krate":0,"index":25}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/digest.rs","byte_start":3150,"byte_end":3157,"line_start":11,"line_end":11,"column_start":54,"column_end":61},"kind":"SuperTrait","from":{"krate":1,"index":2189},"to":{"krate":0,"index":25}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/digest.rs","byte_start":5255,"byte_end":5256,"line_start":84,"line_end":84,"column_start":64,"column_end":65},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":32},"to":{"krate":0,"index":25}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/lib.rs","byte_start":1999,"byte_end":2004,"line_start":58,"line_end":58,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":1540},"to":{"krate":0,"index":43}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.6.2/src/lib.rs","byte_start":2533,"byte_end":2534,"line_start":73,"line_end":73,"column_start":46,"column_end":47},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":49},"to":{"krate":0,"index":41}}]}