{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2","program":"/home/gautam/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--edition=2018","--crate-name","byte_slice_cast","/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"std\"","-C","metadata=e6da09a6ca9bc3f1","-C","extra-filename=-e6da09a6ca9bc3f1","--out-dir","/home/gautam/code/substrate-tcr/target/rls/debug/deps","-L","dependency=/home/gautam/code/substrate-tcr/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/gautam/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/gautam/code/substrate-tcr/target/rls/debug/deps/libbyte_slice_cast-e6da09a6ca9bc3f1.rmeta"},"prelude":{"crate_id":{"name":"byte_slice_cast","disambiguator":[3206703860461439302,1874165163285313190]},"crate_root":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src","external_crates":[{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[4418738106075590160,6298063093324017560]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[9113878364975505769,4626460723841361367]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10636203250160794641,6979396832464280682]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7259142600435629501,12221323364939802703]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[245280942947536957,12219005383890086938]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6161946279237914842,16521306710208745576]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[6542909105960794691,9677219093962929367]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[5468829561226316808,7834745881253856659]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[17700629721805382410,8884445337419759755]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5673318663856259921,7992701887106127366]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","num":11,"id":{"name":"backtrace","disambiguator":[14096840682646779984,4894716104918169263]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[17167590092810160364,15681868143498786567]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","num":13,"id":{"name":"backtrace_sys","disambiguator":[9809686796458150241,12960706147778414440]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[14218938340851961837,11099897245983054425]}}],"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","byte_start":172,"byte_end":25231,"line_start":5,"line_end":827,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","byte_start":172,"byte_end":25231,"line_start":5,"line_end":827,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":16},{"krate":0,"index":66},{"krate":0,"index":81},{"krate":0,"index":79},{"krate":0,"index":76},{"krate":0,"index":74},{"krate":0,"index":17},{"krate":0,"index":19},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":83},{"krate":0,"index":85},{"krate":0,"index":90},{"krate":0,"index":93},{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":103},{"krate":0,"index":106},{"krate":0,"index":109},{"krate":0,"index":111},{"krate":0,"index":116},{"krate":0,"index":119},{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":129},{"krate":0,"index":132},{"krate":0,"index":135},{"krate":0,"index":137},{"krate":0,"index":142},{"krate":0,"index":145},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":155},{"krate":0,"index":158},{"krate":0,"index":161},{"krate":0,"index":163},{"krate":0,"index":168},{"krate":0,"index":171},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":181},{"krate":0,"index":184},{"krate":0,"index":187},{"krate":0,"index":189},{"krate":0,"index":194},{"krate":0,"index":197},{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":207},{"krate":0,"index":210},{"krate":0,"index":213},{"krate":0,"index":215},{"krate":0,"index":220},{"krate":0,"index":223},{"krate":0,"index":226},{"krate":0,"index":228},{"krate":0,"index":233},{"krate":0,"index":236},{"krate":0,"index":38},{"krate":0,"index":41},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":59},{"krate":0,"index":62}],"decl_id":null,"docs":" Safely cast bytes slices from/to slices of built-in fundamental numeric types.","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":67},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","byte_start":2403,"byte_end":2420,"line_start":72,"line_end":72,"column_start":5,"column_end":22},"name":"AlignmentMismatch","qualname":"::Error::AlignmentMismatch","value":"Error::AlignmentMismatch { dst_type, dst_minimum_alignment }","parent":{"krate":0,"index":66},"children":[],"decl_id":null,"docs":" The input slice is not properly aligned for the\n output data type. E.g. for an `u32` output slice\n the memory must be 4-byte aligned.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":70},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","byte_start":2602,"byte_end":2616,"line_start":78,"line_end":78,"column_start":5,"column_end":19},"name":"LengthMismatch","qualname":"::Error::LengthMismatch","value":"Error::LengthMismatch { dst_type, src_slice_size, dst_type_size }","parent":{"krate":0,"index":66},"children":[],"decl_id":null,"docs":" A non-integer number of values from the output\n type would be in the output slice.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":66},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","byte_start":2235,"byte_end":2240,"line_start":68,"line_end":68,"column_start":10,"column_end":15},"name":"Error","qualname":"::Error","value":"Error::{AlignmentMismatch, LengthMismatch}","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":70}],"decl_id":null,"docs":" Possible errors during slice conversion.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":26},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","byte_start":5477,"byte_end":5490,"line_start":187,"line_end":187,"column_start":18,"column_end":31},"name":"FromByteSlice","qualname":"::FromByteSlice","value":"FromByteSlice","parent":null,"children":[{"krate":0,"index":27},{"krate":0,"index":29}],"decl_id":null,"docs":" Trait for converting from a byte slice to a slice of a fundamental, built-in numeric type.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","byte_start":5637,"byte_end":5652,"line_start":193,"line_end":193,"column_start":8,"column_end":23},"name":"from_byte_slice","qualname":"::FromByteSlice::from_byte_slice","value":"fn <T> (slice: &T) -> Result<&[Self], Error>","parent":{"krate":0,"index":26},"children":[],"decl_id":null,"docs":" Convert from an immutable byte slice to a immutable slice of a fundamental, built-in\n numeric type\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","byte_start":5833,"byte_end":5852,"line_start":196,"line_end":196,"column_start":8,"column_end":27},"name":"from_mut_byte_slice","qualname":"::FromByteSlice::from_mut_byte_slice","value":"fn <T> (slice: &mut T) -> Result<&mut [Self], Error>","parent":{"krate":0,"index":26},"children":[],"decl_id":null,"docs":" Convert from an mutable byte slice to a mutable slice of a fundamental, built-in numeric\n type\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":31},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","byte_start":6573,"byte_end":6584,"line_start":220,"line_end":220,"column_start":18,"column_end":29},"name":"ToByteSlice","qualname":"::ToByteSlice","value":"ToByteSlice","parent":null,"children":[{"krate":0,"index":32}],"decl_id":null,"docs":" Trait for converting from an immutable slice of a fundamental, built-in numeric type to an\n immutable byte slice.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","byte_start":6732,"byte_end":6745,"line_start":226,"line_end":226,"column_start":8,"column_end":21},"name":"to_byte_slice","qualname":"::ToByteSlice::to_byte_slice","value":"fn <T> (slice: &T) -> &[u8]","parent":{"krate":0,"index":31},"children":[],"decl_id":null,"docs":" Convert from an immutable slice of a fundamental, built-in numeric type to an immutable\n byte slice\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":34},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","byte_start":7455,"byte_end":7469,"line_start":250,"line_end":250,"column_start":18,"column_end":32},"name":"ToMutByteSlice","qualname":"::ToMutByteSlice","value":"ToMutByteSlice","parent":null,"children":[{"krate":0,"index":35}],"decl_id":null,"docs":" Trait for converting from a mutable slice of a fundamental, built-in numeric type to a mutable\n byte slice.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","byte_start":7611,"byte_end":7628,"line_start":256,"line_end":256,"column_start":8,"column_end":25},"name":"to_mut_byte_slice","qualname":"::ToMutByteSlice::to_mut_byte_slice","value":"fn <T> (slice: &mut T) -> &mut [u8]","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Convert from a mutable slice of a fundamental, built-in numeric type to a mutable byte\n slice\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":38},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","byte_start":10814,"byte_end":10823,"line_start":354,"line_end":354,"column_start":11,"column_end":20},"name":"AsSliceOf","qualname":"::AsSliceOf","value":"AsSliceOf","parent":null,"children":[{"krate":0,"index":39}],"decl_id":null,"docs":" Trait for converting from a byte slice to a slice of a fundamental, built-in numeric type.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","byte_start":10833,"byte_end":10844,"line_start":355,"line_end":355,"column_start":8,"column_end":19},"name":"as_slice_of","qualname":"::AsSliceOf::as_slice_of","value":"fn <T> (&self) -> Result<&[T], Error>","parent":{"krate":0,"index":38},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":45},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","byte_start":11703,"byte_end":11715,"line_start":385,"line_end":385,"column_start":11,"column_end":23},"name":"AsMutSliceOf","qualname":"::AsMutSliceOf","value":"AsMutSliceOf","parent":null,"children":[{"krate":0,"index":46}],"decl_id":null,"docs":" Trait for converting from a mutable byte slice to a mutable slice of a fundamental, built-in\n numeric type.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","byte_start":11725,"byte_end":11740,"line_start":386,"line_end":386,"column_start":8,"column_end":23},"name":"as_mut_slice_of","qualname":"::AsMutSliceOf::as_mut_slice_of","value":"fn <T> (&mut self) -> Result<&mut [T], Error>","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":52},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","byte_start":12624,"byte_end":12635,"line_start":416,"line_end":416,"column_start":11,"column_end":22},"name":"AsByteSlice","qualname":"::AsByteSlice","value":"AsByteSlice<T>","parent":null,"children":[{"krate":0,"index":54}],"decl_id":null,"docs":" Trait for converting from an immutable slice of a fundamental, built-in numeric type to an\n immutable byte slice.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","byte_start":12648,"byte_end":12661,"line_start":417,"line_end":417,"column_start":8,"column_end":21},"name":"as_byte_slice","qualname":"::AsByteSlice::as_byte_slice","value":"fn (&self) -> &[u8]","parent":{"krate":0,"index":52},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":59},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","byte_start":13477,"byte_end":13491,"line_start":445,"line_end":445,"column_start":11,"column_end":25},"name":"AsMutByteSlice","qualname":"::AsMutByteSlice","value":"AsMutByteSlice<T>","parent":null,"children":[{"krate":0,"index":61}],"decl_id":null,"docs":" Trait for converting from a mutable slice of a fundamental, built-in numeric type to a mutable\n byte slice. This trait is usually more convenient to use than `ToMutByteSlice`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","byte_start":13504,"byte_end":13521,"line_start":446,"line_end":446,"column_start":8,"column_end":25},"name":"as_mut_byte_slice","qualname":"::AsMutByteSlice::as_mut_byte_slice","value":"fn (&mut self) -> &mut [u8]","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","byte_start":2744,"byte_end":2749,"line_start":85,"line_end":85,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":18}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","byte_start":3890,"byte_end":3895,"line_start":125,"line_end":125,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":22}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","byte_start":10941,"byte_end":10942,"line_start":358,"line_end":358,"column_start":45,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":43}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","byte_start":11848,"byte_end":11849,"line_start":389,"line_end":389,"column_start":48,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","byte_start":12746,"byte_end":12747,"line_start":420,"line_end":420,"column_start":65,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","byte_start":13620,"byte_end":13621,"line_start":449,"line_end":449,"column_start":71,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","byte_start":2744,"byte_end":2749,"line_start":85,"line_end":85,"column_start":23,"column_end":28},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":66},"to":{"krate":2,"index":7190}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","byte_start":3890,"byte_end":3895,"line_start":125,"line_end":125,"column_start":19,"column_end":24},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":66},"to":{"krate":1,"index":1559}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","byte_start":10941,"byte_end":10942,"line_start":358,"line_end":358,"column_start":45,"column_end":46},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":42},"to":{"krate":0,"index":38}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","byte_start":11848,"byte_end":11849,"line_start":389,"line_end":389,"column_start":48,"column_end":49},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":49},"to":{"krate":0,"index":45}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","byte_start":12746,"byte_end":12747,"line_start":420,"line_end":420,"column_start":65,"column_end":66},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":57},"to":{"krate":0,"index":52}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/byte-slice-cast-0.3.2/src/lib.rs","byte_start":13620,"byte_end":13621,"line_start":449,"line_end":449,"column_start":71,"column_end":72},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":64},"to":{"krate":0,"index":59}}]}