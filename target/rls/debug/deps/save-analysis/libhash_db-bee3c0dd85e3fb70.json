{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2","program":"/home/gautam/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","hash_db","/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=bee3c0dd85e3fb70","-C","extra-filename=-bee3c0dd85e3fb70","--out-dir","/home/gautam/code/substrate-tcr/target/rls/debug/deps","-L","dependency=/home/gautam/code/substrate-tcr/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/gautam/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/gautam/code/substrate-tcr/target/rls/debug/deps/libhash_db-bee3c0dd85e3fb70.rmeta"},"prelude":{"crate_id":{"name":"hash_db","disambiguator":[13972142780812907637,312557294141452667]},"crate_root":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src","external_crates":[{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[4418738106075590160,6298063093324017560]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[9113878364975505769,4626460723841361367]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10636203250160794641,6979396832464280682]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7259142600435629501,12221323364939802703]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[245280942947536957,12219005383890086938]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6161946279237914842,16521306710208745576]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[6542909105960794691,9677219093962929367]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[5468829561226316808,7834745881253856659]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[17700629721805382410,8884445337419759755]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5673318663856259921,7992701887106127366]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","num":11,"id":{"name":"backtrace","disambiguator":[14096840682646779984,4894716104918169263]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[17167590092810160364,15681868143498786567]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","num":13,"id":{"name":"backtrace_sys","disambiguator":[9809686796458150241,12960706147778414440]}},{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[14218938340851961837,11099897245983054425]}}],"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":603,"byte_end":7706,"line_start":15,"line_end":187,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":603,"byte_end":7706,"line_start":15,"line_end":187,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":17},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":25},{"krate":0,"index":32},{"krate":0,"index":37},{"krate":0,"index":43},{"krate":0,"index":49},{"krate":0,"index":57},{"krate":0,"index":62},{"krate":0,"index":68},{"krate":0,"index":74},{"krate":0,"index":80},{"krate":0,"index":86},{"krate":0,"index":93}],"decl_id":null,"docs":" Database of byte-slices keyed to their hash.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":14},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":861,"byte_end":871,"line_start":27,"line_end":27,"column_start":11,"column_end":21},"name":"MaybeDebug","qualname":"::MaybeDebug","value":"MaybeDebug: Debug","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":827,"byte_end":850,"line_start":26,"line_end":26,"column_start":1,"column_end":24}}]},{"kind":"Type","id":{"krate":0,"index":17},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":1608,"byte_end":1614,"line_start":44,"line_end":44,"column_start":10,"column_end":16},"name":"Prefix","qualname":"::Prefix","value":"(&'a [u8], Option<u8>)","parent":null,"children":[],"decl_id":null,"docs":" A trie node prefix, it is the nibble path from the trie root\n to the trie node.\n For a node containing no partial key value it is the full key.\n For a value node or node containing a partial key, it is the full key minus its node partial\n nibbles (the node key can be split into prefix and node partial).\n Therefore it is always the leftmost portion of the node key, so its internal representation\n is a non expanded byte slice followed by a last padded byte representation.\n The padded byte is an optional padded value.\n","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":19},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":1762,"byte_end":1774,"line_start":49,"line_end":49,"column_start":12,"column_end":24},"name":"EMPTY_PREFIX","qualname":"::EMPTY_PREFIX","value":"Prefix<'static>","parent":null,"children":[],"decl_id":null,"docs":" An empty prefix constant.\n Can be use when the prefix is not use internally\n or for root nodes.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":20},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":2033,"byte_end":2039,"line_start":54,"line_end":54,"column_start":11,"column_end":17},"name":"Hasher","qualname":"::Hasher","value":"Hasher: Sync + Send","parent":null,"children":[{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24}],"decl_id":null,"docs":" Trait describing an object that can hash a slice of bytes. Used to abstract\n other types over the hashing algorithm. Defines a single `hash` method and an\n `Out` associated type with the necessary bounds.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":21},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":2098,"byte_end":2101,"line_start":56,"line_end":56,"column_start":7,"column_end":10},"name":"Out","qualname":"::Hasher::Out","value":"type Out: AsRef<[u8]> + AsMut<[u8]> + Default + MaybeDebug + PartialEq + Eq\n\t\t+ hash::Hash + Send + Sync + Clone + Copy;","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" The output type of the `Hasher`\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":22},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":2277,"byte_end":2286,"line_start":59,"line_end":59,"column_start":7,"column_end":16},"name":"StdHasher","qualname":"::Hasher::StdHasher","value":"type StdHasher: Sync + Send + Default + hash::Hasher;","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" What to use to build `HashMap`s with this `Hasher`.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":23},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":2382,"byte_end":2388,"line_start":61,"line_end":61,"column_start":8,"column_end":14},"name":"LENGTH","qualname":"::Hasher::LENGTH","value":"usize","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" The length in bytes of the `Hasher` output.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":2497,"byte_end":2501,"line_start":64,"line_end":64,"column_start":5,"column_end":9},"name":"hash","qualname":"::Hasher::hash","value":"fn (x: &[u8]) -> Self::Out","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" Compute the hash of the provided slice of bytes returning the `Out` type of the `Hasher`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":25},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":2679,"byte_end":2686,"line_start":70,"line_end":70,"column_start":11,"column_end":18},"name":"PlainDB","qualname":"::PlainDB","value":"PlainDB<K, V>: Send + Sync + AsPlainDB<K, V>","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31}],"decl_id":null,"docs":" Trait modelling a plain datastore whose key is a fixed type.\n The caller should ensure that a key only corresponds to\n one value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":2834,"byte_end":2837,"line_start":73,"line_end":73,"column_start":5,"column_end":8},"name":"get","qualname":"::PlainDB::get","value":"fn (&self, key: &K) -> Option<V>","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" Look up a given hash into the bytes that hash to it, returning None if the\n hash is not known.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":2917,"byte_end":2925,"line_start":76,"line_end":76,"column_start":5,"column_end":13},"name":"contains","qualname":"::PlainDB::contains","value":"fn (&self, key: &K) -> bool","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" Check for the existance of a hash-key.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":3189,"byte_end":3196,"line_start":81,"line_end":81,"column_start":5,"column_end":12},"name":"emplace","qualname":"::PlainDB::emplace","value":"fn (&mut self, key: K, value: V) -> ()","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" Insert a datum item into the DB. Insertions are counted and the equivalent\n number of `remove()`s must be performed before the data is considered dead.\n The caller should ensure that a key only corresponds to one value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":3527,"byte_end":3533,"line_start":87,"line_end":87,"column_start":5,"column_end":11},"name":"remove","qualname":"::PlainDB::remove","value":"fn (&mut self, key: &K) -> ()","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" Remove a datum previously inserted. Insertions can be \"owed\" such that the\n same number of `insert()`s may happen without the data being eventually\n being inserted into the DB. It can be \"owed\" more than once.\n The caller should ensure that a key only corresponds to one value.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":32},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":3614,"byte_end":3624,"line_start":91,"line_end":91,"column_start":11,"column_end":21},"name":"PlainDBRef","qualname":"::PlainDBRef","value":"PlainDBRef<K, V>","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":36}],"decl_id":null,"docs":" Trait for immutable reference of PlainDB.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":3741,"byte_end":3744,"line_start":94,"line_end":94,"column_start":5,"column_end":8},"name":"get","qualname":"::PlainDBRef::get","value":"fn (&self, key: &K) -> Option<V>","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Look up a given hash into the bytes that hash to it, returning None if the\n hash is not known.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":3824,"byte_end":3832,"line_start":97,"line_end":97,"column_start":5,"column_end":13},"name":"contains","qualname":"::PlainDBRef::contains","value":"fn (&self, key: &K) -> bool","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Check for the existance of a hash-key.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":49},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":4346,"byte_end":4352,"line_start":111,"line_end":111,"column_start":11,"column_end":17},"name":"HashDB","qualname":"::HashDB","value":"HashDB<H: Hasher, T>: Send + Sync + AsHashDB<H, T>","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56}],"decl_id":null,"docs":" Trait modelling datastore keyed by a hash defined by the `Hasher`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":4507,"byte_end":4510,"line_start":114,"line_end":114,"column_start":5,"column_end":8},"name":"get","qualname":"::HashDB::get","value":"fn (&self, key: &H::Out, prefix: Prefix) -> Option<T>","parent":{"krate":0,"index":49},"children":[],"decl_id":null,"docs":" Look up a given hash into the bytes that hash to it, returning None if the\n hash is not known.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":4611,"byte_end":4619,"line_start":117,"line_end":117,"column_start":5,"column_end":13},"name":"contains","qualname":"::HashDB::contains","value":"fn (&self, key: &H::Out, prefix: Prefix) -> bool","parent":{"krate":0,"index":49},"children":[],"decl_id":null,"docs":" Check for the existance of a hash-key.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":4884,"byte_end":4890,"line_start":122,"line_end":122,"column_start":5,"column_end":11},"name":"insert","qualname":"::HashDB::insert","value":"fn (&mut self, prefix: Prefix, value: &[u8]) -> H::Out","parent":{"krate":0,"index":49},"children":[],"decl_id":null,"docs":" Insert a datum item into the DB and return the datum's hash for a later lookup. Insertions\n are counted and the equivalent number of `remove()`s must be performed before the data\n is considered dead.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":5024,"byte_end":5031,"line_start":125,"line_end":125,"column_start":5,"column_end":12},"name":"emplace","qualname":"::HashDB::emplace","value":"fn (&mut self, key: H::Out, prefix: Prefix, value: T) -> ()","parent":{"krate":0,"index":49},"children":[],"decl_id":null,"docs":" Like `insert()`, except you provide the key and the data is all moved.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":5311,"byte_end":5317,"line_start":130,"line_end":130,"column_start":5,"column_end":11},"name":"remove","qualname":"::HashDB::remove","value":"fn (&mut self, key: &H::Out, prefix: Prefix) -> ()","parent":{"krate":0,"index":49},"children":[],"decl_id":null,"docs":" Remove a datum previously inserted. Insertions can be \"owed\" such that the same number of\n `insert()`s may happen without the data being eventually being inserted into the DB.\n It can be \"owed\" more than once.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":57},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":5418,"byte_end":5427,"line_start":134,"line_end":134,"column_start":11,"column_end":20},"name":"HashDBRef","qualname":"::HashDBRef","value":"HashDBRef<H: Hasher, T>","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":61}],"decl_id":null,"docs":" Trait for immutable reference of HashDB.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":5552,"byte_end":5555,"line_start":137,"line_end":137,"column_start":5,"column_end":8},"name":"get","qualname":"::HashDBRef::get","value":"fn (&self, key: &H::Out, prefix: Prefix) -> Option<T>","parent":{"krate":0,"index":57},"children":[],"decl_id":null,"docs":" Look up a given hash into the bytes that hash to it, returning None if the\n hash is not known.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":5656,"byte_end":5664,"line_start":140,"line_end":140,"column_start":5,"column_end":13},"name":"contains","qualname":"::HashDBRef::contains","value":"fn (&self, key: &H::Out, prefix: Prefix) -> bool","parent":{"krate":0,"index":57},"children":[],"decl_id":null,"docs":" Check for the existance of a hash-key.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":74},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":6287,"byte_end":6295,"line_start":158,"line_end":158,"column_start":11,"column_end":19},"name":"AsHashDB","qualname":"::AsHashDB","value":"AsHashDB<H: Hasher, T>","parent":null,"children":[{"krate":0,"index":77},{"krate":0,"index":78}],"decl_id":null,"docs":" Upcast trait for HashDB.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":6385,"byte_end":6395,"line_start":160,"line_end":160,"column_start":5,"column_end":15},"name":"as_hash_db","qualname":"::AsHashDB::as_hash_db","value":"fn (&self) -> &dyn HashDB<H, T>","parent":{"krate":0,"index":74},"children":[],"decl_id":null,"docs":" Perform upcast to HashDB for anything that derives from HashDB.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":6506,"byte_end":6520,"line_start":162,"line_end":162,"column_start":5,"column_end":19},"name":"as_hash_db_mut","qualname":"::AsHashDB::as_hash_db_mut","value":"fn <'a> (&'a mut self) -> &'a mut (dyn HashDB<H, T> + 'a)","parent":{"krate":0,"index":74},"children":[],"decl_id":null,"docs":" Perform mutable upcast to HashDB for anything that derives from HashDB.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":80},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":6618,"byte_end":6627,"line_start":166,"line_end":166,"column_start":11,"column_end":20},"name":"AsPlainDB","qualname":"::AsPlainDB","value":"AsPlainDB<K, V>","parent":null,"children":[{"krate":0,"index":83},{"krate":0,"index":84}],"decl_id":null,"docs":" Upcast trait for PlainDB.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":6711,"byte_end":6722,"line_start":168,"line_end":168,"column_start":5,"column_end":16},"name":"as_plain_db","qualname":"::AsPlainDB::as_plain_db","value":"fn (&self) -> &dyn PlainDB<K, V>","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" Perform upcast to PlainDB for anything that derives from PlainDB.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":6836,"byte_end":6851,"line_start":170,"line_end":170,"column_start":5,"column_end":20},"name":"as_plain_db_mut","qualname":"::AsPlainDB::as_plain_db_mut","value":"fn <'a> (&'a mut self) -> &'a mut (dyn PlainDB<K, V> + 'a)","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" Perform mutable upcast to PlainDB for anything that derives from PlainDB.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":936,"byte_end":937,"line_start":29,"line_end":29,"column_start":31,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":873,"byte_end":878,"line_start":27,"line_end":27,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":7185},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":936,"byte_end":937,"line_start":29,"line_end":29,"column_start":31,"column_end":32},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":16},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":2041,"byte_end":2045,"line_start":54,"line_end":54,"column_start":19,"column_end":23},"kind":"SuperTrait","from":{"krate":2,"index":1545},"to":{"krate":0,"index":20}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":2048,"byte_end":2052,"line_start":54,"line_end":54,"column_start":26,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1535},"to":{"krate":0,"index":20}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":2694,"byte_end":2698,"line_start":70,"line_end":70,"column_start":26,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1535},"to":{"krate":0,"index":25}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":2701,"byte_end":2705,"line_start":70,"line_end":70,"column_start":33,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":1545},"to":{"krate":0,"index":25}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":2708,"byte_end":2717,"line_start":70,"line_end":70,"column_start":40,"column_end":49},"kind":"SuperTrait","from":{"krate":0,"index":80},"to":{"krate":0,"index":25}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":4368,"byte_end":4372,"line_start":111,"line_end":111,"column_start":33,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":1535},"to":{"krate":0,"index":49}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":4375,"byte_end":4379,"line_start":111,"line_end":111,"column_start":40,"column_end":44},"kind":"SuperTrait","from":{"krate":2,"index":1545},"to":{"krate":0,"index":49}},{"span":{"file_name":"/home/gautam/.cargo/registry/src/github.com-1ecc6299db9ec823/hash-db-0.15.2/src/lib.rs","byte_start":4382,"byte_end":4390,"line_start":111,"line_end":111,"column_start":47,"column_end":55},"kind":"SuperTrait","from":{"krate":0,"index":74},"to":{"krate":0,"index":49}}]}