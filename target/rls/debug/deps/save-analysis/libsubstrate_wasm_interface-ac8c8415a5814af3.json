{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface","program":"/home/gautam/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--edition=2018","--crate-name","substrate_wasm_interface","/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=ac8c8415a5814af3","-C","extra-filename=-ac8c8415a5814af3","--out-dir","/home/gautam/code/substrate-tcr/target/rls/debug/deps","-L","dependency=/home/gautam/code/substrate-tcr/target/rls/debug/deps","--extern","wasmi=/home/gautam/code/substrate-tcr/target/rls/debug/deps/libwasmi-0d7f19e18af878f2.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/gautam/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/gautam/code/substrate-tcr/target/rls/debug/deps/libsubstrate_wasm_interface-ac8c8415a5814af3.rmeta"},"prelude":{"crate_id":{"name":"substrate_wasm_interface","disambiguator":[4089995358544457547,9229699307073715223]},"crate_root":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src","external_crates":[{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[4418738106075590160,6298063093324017560]}},{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[9113878364975505769,4626460723841361367]}},{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10636203250160794641,6979396832464280682]}},{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7259142600435629501,12221323364939802703]}},{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[245280942947536957,12219005383890086938]}},{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6161946279237914842,16521306710208745576]}},{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[6542909105960794691,9677219093962929367]}},{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[5468829561226316808,7834745881253856659]}},{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[17700629721805382410,8884445337419759755]}},{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5673318663856259921,7992701887106127366]}},{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","num":11,"id":{"name":"backtrace","disambiguator":[14096840682646779984,4894716104918169263]}},{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[17167590092810160364,15681868143498786567]}},{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","num":13,"id":{"name":"backtrace_sys","disambiguator":[9809686796458150241,12960706147778414440]}},{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[14218938340851961837,11099897245983054425]}},{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/wasmi_impl.rs","num":15,"id":{"name":"wasmi","disambiguator":[15966995593235499942,7878036474932362104]}},{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/wasmi_impl.rs","num":16,"id":{"name":"memory_units","disambiguator":[7625663440378967158,594771948268627360]}},{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/wasmi_impl.rs","num":17,"id":{"name":"parity_wasm","disambiguator":[9617965270862574160,10565283609962779752]}},{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/wasmi_impl.rs","num":18,"id":{"name":"wasmi_validation","disambiguator":[6435936278729121784,11308251528303127252]}},{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/wasmi_impl.rs","num":19,"id":{"name":"num_rational","disambiguator":[14038515331545208537,13494274042754788558]}},{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/wasmi_impl.rs","num":20,"id":{"name":"num_bigint","disambiguator":[8665772517186533409,6162634742833349481]}},{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/wasmi_impl.rs","num":21,"id":{"name":"num_integer","disambiguator":[4719163724763472064,11132189398744689646]}},{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/wasmi_impl.rs","num":22,"id":{"name":"num_traits","disambiguator":[9704772506329014089,15141655376320292708]}},{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/wasmi_impl.rs","num":23,"id":{"name":"libc","disambiguator":[13254792230667284302,3386195477332223755]}}],"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":718,"byte_end":8730,"line_start":17,"line_end":324,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":718,"byte_end":8730,"line_start":17,"line_end":324,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":18},{"krate":0,"index":36},{"krate":0,"index":106},{"krate":0,"index":123},{"krate":0,"index":121},{"krate":0,"index":119},{"krate":0,"index":117},{"krate":0,"index":115},{"krate":0,"index":124},{"krate":0,"index":142},{"krate":0,"index":140},{"krate":0,"index":138},{"krate":0,"index":137},{"krate":0,"index":38},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":145},{"krate":0,"index":161},{"krate":0,"index":157},{"krate":0,"index":154},{"krate":0,"index":151},{"krate":0,"index":149},{"krate":0,"index":50},{"krate":0,"index":59},{"krate":0,"index":62},{"krate":0,"index":65},{"krate":0,"index":69},{"krate":0,"index":72},{"krate":0,"index":164},{"krate":0,"index":174},{"krate":0,"index":171},{"krate":0,"index":169},{"krate":0,"index":167},{"krate":0,"index":73},{"krate":0,"index":78},{"krate":0,"index":82},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":103},{"krate":0,"index":105},{"krate":0,"index":176},{"krate":0,"index":179},{"krate":0,"index":181},{"krate":0,"index":184},{"krate":0,"index":186},{"krate":0,"index":189},{"krate":0,"index":191},{"krate":0,"index":194}],"decl_id":null,"docs":" Types and traits for interfacing between the host and the wasm runtime.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":36},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":942,"byte_end":948,"line_start":24,"line_end":24,"column_start":10,"column_end":16},"name":"Result","qualname":"::Result","value":"result::Result<T, String>","parent":null,"children":[],"decl_id":null,"docs":" Result type used by traits in this crate.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":107},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":1149,"byte_end":1152,"line_start":30,"line_end":30,"column_start":2,"column_end":5},"name":"I32","qualname":"::ValueType::I32","value":"ValueType::I32","parent":{"krate":0,"index":106},"children":[],"decl_id":null,"docs":" An `i32` value type.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":109},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":1181,"byte_end":1184,"line_start":32,"line_end":32,"column_start":2,"column_end":5},"name":"I64","qualname":"::ValueType::I64","value":"ValueType::I64","parent":{"krate":0,"index":106},"children":[],"decl_id":null,"docs":" An `i64` value type.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":111},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":1213,"byte_end":1216,"line_start":34,"line_end":34,"column_start":2,"column_end":5},"name":"F32","qualname":"::ValueType::F32","value":"ValueType::F32","parent":{"krate":0,"index":106},"children":[],"decl_id":null,"docs":" An `f32` value type.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":113},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":1245,"byte_end":1248,"line_start":36,"line_end":36,"column_start":2,"column_end":5},"name":"F64","qualname":"::ValueType::F64","value":"ValueType::F64","parent":{"krate":0,"index":106},"children":[],"decl_id":null,"docs":" An `f64` value type.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":106},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":1110,"byte_end":1119,"line_start":28,"line_end":28,"column_start":10,"column_end":19},"name":"ValueType","qualname":"::ValueType","value":"ValueType::{I32, I64, F32, F64}","parent":null,"children":[{"krate":0,"index":107},{"krate":0,"index":109},{"krate":0,"index":111},{"krate":0,"index":113}],"decl_id":null,"docs":" Value types supported by Substrate on the boundary between host/Wasm.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":125},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":1402,"byte_end":1405,"line_start":43,"line_end":43,"column_start":2,"column_end":5},"name":"I32","qualname":"::Value::I32","value":"Value::I32(i32)","parent":{"krate":0,"index":124},"children":[],"decl_id":null,"docs":" An `i32` value.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":128},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":1434,"byte_end":1437,"line_start":45,"line_end":45,"column_start":2,"column_end":5},"name":"I64","qualname":"::Value::I64","value":"Value::I64(i64)","parent":{"krate":0,"index":124},"children":[],"decl_id":null,"docs":" An `i64` value.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":131},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":1481,"byte_end":1484,"line_start":47,"line_end":47,"column_start":2,"column_end":5},"name":"F32","qualname":"::Value::F32","value":"Value::F32(u32)","parent":{"krate":0,"index":124},"children":[],"decl_id":null,"docs":" An nan-preserving `f32` value.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":134},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":1528,"byte_end":1531,"line_start":49,"line_end":49,"column_start":2,"column_end":5},"name":"F64","qualname":"::Value::F64","value":"Value::F64(u64)","parent":{"krate":0,"index":124},"children":[],"decl_id":null,"docs":" An nan-preserving `f64` value.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":124},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":1372,"byte_end":1377,"line_start":41,"line_end":41,"column_start":10,"column_end":15},"name":"Value","qualname":"::Value","value":"Value::{I32, I64, F32, F64}","parent":null,"children":[{"krate":0,"index":125},{"krate":0,"index":128},{"krate":0,"index":131},{"krate":0,"index":134}],"decl_id":null,"docs":" Values supported by Substrate on the boundary between host/Wasm.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":44},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":1865,"byte_end":1876,"line_start":65,"line_end":65,"column_start":11,"column_end":22},"name":"PointerType","qualname":"::PointerType","value":"PointerType: Sized","parent":null,"children":[{"krate":0,"index":45}],"decl_id":null,"docs":" Something that can be wrapped in a wasm `Pointer`.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":45},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":1928,"byte_end":1932,"line_start":67,"line_end":67,"column_start":8,"column_end":12},"name":"SIZE","qualname":"::PointerType::SIZE","value":"u32","parent":{"krate":0,"index":44},"children":[],"decl_id":null,"docs":" The size of the type in wasm.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":145},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":2195,"byte_end":2202,"line_start":77,"line_end":77,"column_start":12,"column_end":19},"name":"Pointer","qualname":"::Pointer","value":"Pointer {  }","parent":null,"children":[{"krate":0,"index":147},{"krate":0,"index":148}],"decl_id":null,"docs":" Type to represent a pointer in wasm at the host.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":2341,"byte_end":2344,"line_start":84,"line_end":84,"column_start":9,"column_end":12},"name":"new","qualname":"<Pointer<T>>::new","value":"fn (ptr: u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance of `Self`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":2663,"byte_end":2669,"line_start":96,"line_end":96,"column_start":9,"column_end":15},"name":"offset","qualname":"<Pointer<T>>::offset","value":"fn (self, offset: u32) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Calculate the offset from this pointer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":2889,"byte_end":2893,"line_start":106,"line_end":106,"column_start":9,"column_end":13},"name":"null","qualname":"<Pointer<T>>::null","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a null pointer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":2994,"byte_end":2998,"line_start":111,"line_end":111,"column_start":9,"column_end":13},"name":"cast","qualname":"<Pointer<T>>::cast","value":"fn <R> (self) -> Pointer<R>","parent":null,"children":[],"decl_id":null,"docs":" Cast this pointer of type `T` to a pointer of type `R`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":72},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":3696,"byte_end":3704,"line_start":143,"line_end":143,"column_start":10,"column_end":18},"name":"WordSize","qualname":"::WordSize","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" The word size used in wasm. Normally known as `usize` in Rust.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":164},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":3795,"byte_end":3804,"line_start":147,"line_end":147,"column_start":12,"column_end":21},"name":"Signature","qualname":"::Signature","value":"Signature { args, return_value }","parent":null,"children":[{"krate":0,"index":165},{"krate":0,"index":166}],"decl_id":null,"docs":" The Signature of a function\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":165},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":3846,"byte_end":3850,"line_start":149,"line_end":149,"column_start":6,"column_end":10},"name":"args","qualname":"::Signature::args","value":"std::borrow::Cow<'static, [ValueType]>","parent":{"krate":0,"index":164},"children":[],"decl_id":null,"docs":" The arguments of a function.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":166},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":3930,"byte_end":3942,"line_start":151,"line_end":151,"column_start":6,"column_end":18},"name":"return_value","qualname":"::Signature::return_value","value":"std::option::Option<ValueType>","parent":{"krate":0,"index":164},"children":[],"decl_id":null,"docs":" The optional return value of a function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":4034,"byte_end":4037,"line_start":156,"line_end":156,"column_start":9,"column_end":12},"name":"new","qualname":"<Signature>::new","value":"fn <T> (args: T, return_value: Option<ValueType>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance of `Signature`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":4284,"byte_end":4297,"line_start":164,"line_end":164,"column_start":9,"column_end":22},"name":"new_with_args","qualname":"<Signature>::new_with_args","value":"fn <T> (args: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance of `Signature` with the given `args` and without any return value.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":78},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":4515,"byte_end":4523,"line_start":174,"line_end":174,"column_start":11,"column_end":19},"name":"Function","qualname":"::Function","value":"Function","parent":null,"children":[{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81}],"decl_id":null,"docs":" Something that provides a function implementation on the host for a wasm function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":4570,"byte_end":4574,"line_start":176,"line_end":176,"column_start":5,"column_end":9},"name":"name","qualname":"::Function::name","value":"fn (&self) -> &str","parent":{"krate":0,"index":78},"children":[],"decl_id":null,"docs":" Returns the name of this function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":4640,"byte_end":4649,"line_start":178,"line_end":178,"column_start":5,"column_end":14},"name":"signature","qualname":"::Function::signature","value":"fn (&self) -> Signature","parent":{"krate":0,"index":78},"children":[],"decl_id":null,"docs":" Returns the signature of this function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":4728,"byte_end":4735,"line_start":180,"line_end":180,"column_start":5,"column_end":12},"name":"execute","qualname":"::Function::execute","value":"fn (&self, context: &mut dyn FunctionContext, args: &mut dyn Iterator<Item = Value>) -> Result<Option<Value>>","parent":{"krate":0,"index":78},"children":[],"decl_id":null,"docs":" Execute this function with the given arguments.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":82},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":4963,"byte_end":4978,"line_start":188,"line_end":188,"column_start":11,"column_end":26},"name":"FunctionContext","qualname":"::FunctionContext","value":"FunctionContext","parent":null,"children":[{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88}],"decl_id":null,"docs":" Context used by `Function` to interact with the allocator and the memory of the wasm instance.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":5032,"byte_end":5043,"line_start":190,"line_end":190,"column_start":5,"column_end":16},"name":"read_memory","qualname":"::FunctionContext::read_memory","value":"fn (&self, address: Pointer<u8>, size: WordSize) -> Result<Vec<u8>>","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" Read memory from `address` into a vector.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":5317,"byte_end":5333,"line_start":197,"line_end":197,"column_start":5,"column_end":21},"name":"read_memory_into","qualname":"::FunctionContext::read_memory_into","value":"fn (&self, address: Pointer<u8>, dest: &mut [u8]) -> Result<()>","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" Read memory into the given `dest` buffer from `address`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":5455,"byte_end":5467,"line_start":199,"line_end":199,"column_start":5,"column_end":17},"name":"write_memory","qualname":"::FunctionContext::write_memory","value":"fn (&mut self, address: Pointer<u8>, data: &[u8]) -> Result<()>","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" Write the given data at `address` into the memory.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":5582,"byte_end":5597,"line_start":201,"line_end":201,"column_start":5,"column_end":20},"name":"allocate_memory","qualname":"::FunctionContext::allocate_memory","value":"fn (&mut self, size: WordSize) -> Result<Pointer<u8>>","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" Allocate a memory instance of `size` bytes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":5694,"byte_end":5711,"line_start":203,"line_end":203,"column_start":5,"column_end":22},"name":"deallocate_memory","qualname":"::FunctionContext::deallocate_memory","value":"fn (&mut self, ptr: Pointer<u8>) -> Result<()>","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" Deallocate a given memory instance.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":5797,"byte_end":5804,"line_start":205,"line_end":205,"column_start":5,"column_end":12},"name":"sandbox","qualname":"::FunctionContext::sandbox","value":"fn (&mut self) -> &mut dyn Sandbox","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" Provides access to the sandbox.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":89},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":5880,"byte_end":5888,"line_start":209,"line_end":209,"column_start":10,"column_end":18},"name":"MemoryId","qualname":"::MemoryId","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Sandbox memory identifier.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":90},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":5958,"byte_end":5965,"line_start":212,"line_end":212,"column_start":11,"column_end":18},"name":"Sandbox","qualname":"::Sandbox","value":"Sandbox","parent":null,"children":[{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97}],"decl_id":null,"docs":" Something that provides access to the sandbox.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":6061,"byte_end":6071,"line_start":214,"line_end":214,"column_start":5,"column_end":15},"name":"memory_get","qualname":"::Sandbox::memory_get","value":"fn (&self, memory_id: MemoryId, offset: WordSize, buf_ptr: Pointer<u8>, buf_len: WordSize) -> Result<u32>","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" Get sandbox memory from the `memory_id` instance at `offset` into the given buffer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":6239,"byte_end":6249,"line_start":222,"line_end":222,"column_start":5,"column_end":15},"name":"memory_set","qualname":"::Sandbox::memory_set","value":"fn (&mut self, memory_id: MemoryId, offset: WordSize, val_ptr: Pointer<u8>, val_len: WordSize) -> Result<u32>","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" Set sandbox memory from the given value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":6406,"byte_end":6421,"line_start":230,"line_end":230,"column_start":5,"column_end":20},"name":"memory_teardown","qualname":"::Sandbox::memory_teardown","value":"fn (&mut self, memory_id: MemoryId) -> Result<()>","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" Delete a memory instance.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":6599,"byte_end":6609,"line_start":233,"line_end":233,"column_start":5,"column_end":15},"name":"memory_new","qualname":"::Sandbox::memory_new","value":"fn (&mut self, initial: u32, maximum: u32) -> Result<MemoryId>","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" Create a new memory instance with the given `initial` size and the `maximum` size.\n The size is given in wasm pages.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":6718,"byte_end":6724,"line_start":235,"line_end":235,"column_start":5,"column_end":11},"name":"invoke","qualname":"::Sandbox::invoke","value":"fn (&mut self, instance_id: u32, export_name: &str, args: &[u8], return_val: Pointer<u8>, return_val_len: WordSize, state: u32) -> Result<u32>","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" Invoke an exported function by a name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":6919,"byte_end":6936,"line_start":245,"line_end":245,"column_start":5,"column_end":22},"name":"instance_teardown","qualname":"::Sandbox::instance_teardown","value":"fn (&mut self, instance_id: u32) -> Result<()>","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" Delete a sandbox instance.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":7021,"byte_end":7033,"line_start":247,"line_end":247,"column_start":5,"column_end":17},"name":"instance_new","qualname":"::Sandbox::instance_new","value":"fn (&mut self, dispatch_thunk_id: u32, wasm: &[u8], raw_env_def: &[u8], state: u32) -> Result<u32>","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" Create a new sandbox instance.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":98},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":7221,"byte_end":7234,"line_start":257,"line_end":257,"column_start":11,"column_end":24},"name":"HostFunctions","qualname":"::HostFunctions","value":"HostFunctions","parent":null,"children":[{"krate":0,"index":99}],"decl_id":null,"docs":" Something that provides implementations for host functions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":7274,"byte_end":7283,"line_start":259,"line_end":259,"column_start":5,"column_end":14},"name":"functions","qualname":"::HostFunctions::functions","value":"fn () -> &'static [&'static dyn Function]","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Returns all host functions.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":100},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":7404,"byte_end":7413,"line_start":263,"line_end":263,"column_start":11,"column_end":20},"name":"IntoValue","qualname":"::IntoValue","value":"IntoValue","parent":null,"children":[{"krate":0,"index":101},{"krate":0,"index":102}],"decl_id":null,"docs":" Something that can be converted into a wasm compatible `Value`.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":101},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":7459,"byte_end":7469,"line_start":265,"line_end":265,"column_start":8,"column_end":18},"name":"VALUE_TYPE","qualname":"::IntoValue::VALUE_TYPE","value":"ValueType","parent":{"krate":0,"index":100},"children":[],"decl_id":null,"docs":" The type of the value in wasm.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":7528,"byte_end":7538,"line_start":268,"line_end":268,"column_start":5,"column_end":15},"name":"into_value","qualname":"::IntoValue::into_value","value":"fn (self) -> Value","parent":{"krate":0,"index":100},"children":[],"decl_id":null,"docs":" Convert `self` into a wasm `Value`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":103},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":7627,"byte_end":7639,"line_start":272,"line_end":272,"column_start":11,"column_end":23},"name":"TryFromValue","qualname":"::TryFromValue","value":"TryFromValue: Sized","parent":null,"children":[{"krate":0,"index":104}],"decl_id":null,"docs":" Something that can may be created from a wasm `Value`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":7704,"byte_end":7718,"line_start":274,"line_end":274,"column_start":5,"column_end":19},"name":"try_from_value","qualname":"::TryFromValue::try_from_value","value":"fn (val: Value) -> Option<Self>","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" Try to convert the given `Value` into `Self`.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/wasmi_impl.rs","byte_start":9591,"byte_end":9603,"line_start":21,"line_end":21,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":24}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/wasmi_impl.rs","byte_start":9866,"byte_end":9871,"line_start":32,"line_end":32,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":26}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/wasmi_impl.rs","byte_start":10201,"byte_end":10210,"line_start":43,"line_end":43,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":28}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/wasmi_impl.rs","byte_start":10436,"byte_end":10445,"line_start":54,"line_end":54,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":30}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/wasmi_impl.rs","byte_start":10706,"byte_end":10715,"line_start":65,"line_end":65,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":32}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/wasmi_impl.rs","byte_start":10927,"byte_end":10936,"line_start":72,"line_end":72,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":35}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":2282,"byte_end":2289,"line_start":82,"line_end":82,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":56},{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":3310,"byte_end":3317,"line_start":128,"line_end":128,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":3471,"byte_end":3478,"line_start":133,"line_end":133,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":3971,"byte_end":3980,"line_start":154,"line_end":154,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":74},{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/wasmi_impl.rs","byte_start":9591,"byte_end":9603,"line_start":21,"line_end":21,"column_start":29,"column_end":41},"kind":{"Impl":{"id":0}},"from":{"krate":15,"index":2564},"to":{"krate":2,"index":2206}},{"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/wasmi_impl.rs","byte_start":9866,"byte_end":9871,"line_start":32,"line_end":32,"column_start":36,"column_end":41},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":124},"to":{"krate":2,"index":2206}},{"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/wasmi_impl.rs","byte_start":10201,"byte_end":10210,"line_start":43,"line_end":43,"column_start":33,"column_end":42},"kind":{"Impl":{"id":2}},"from":{"krate":15,"index":2541},"to":{"krate":2,"index":2206}},{"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/wasmi_impl.rs","byte_start":10436,"byte_end":10445,"line_start":54,"line_end":54,"column_start":33,"column_end":42},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":106},"to":{"krate":2,"index":2206}},{"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/wasmi_impl.rs","byte_start":10706,"byte_end":10715,"line_start":65,"line_end":65,"column_start":33,"column_end":42},"kind":{"Impl":{"id":4}},"from":{"krate":15,"index":2529},"to":{"krate":2,"index":2206}},{"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/wasmi_impl.rs","byte_start":10927,"byte_end":10936,"line_start":72,"line_end":72,"column_start":34,"column_end":43},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":164},"to":{"krate":2,"index":2206}},{"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":1878,"byte_end":1883,"line_start":65,"line_end":65,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":1540},"to":{"krate":0,"index":44}},{"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":2282,"byte_end":2289,"line_start":82,"line_end":82,"column_start":22,"column_end":29},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":145},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":3310,"byte_end":3317,"line_start":128,"line_end":128,"column_start":36,"column_end":43},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":145},"to":{"krate":0,"index":100}},{"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":3471,"byte_end":3478,"line_start":133,"line_end":133,"column_start":39,"column_end":46},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":145},"to":{"krate":0,"index":103}},{"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":3971,"byte_end":3980,"line_start":154,"line_end":154,"column_start":6,"column_end":15},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/gautam/.cargo/git/checkouts/substrate-7e08433d4c370a21/acf86cd/core/wasm-interface/src/lib.rs","byte_start":7641,"byte_end":7646,"line_start":272,"line_end":272,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1540},"to":{"krate":0,"index":103}}]}